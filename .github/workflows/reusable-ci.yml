name: Reusable CI

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use'
        required: false
        type: string
        default: '3.11'
      service-name:
        description: 'Name of the service being built'
        required: true
        type: string
      dockerfile:
        description: 'Path to Dockerfile'
        required: false
        type: string
        default: 'Dockerfile'
      run-tests:
        description: 'Whether to run tests'
        required: false
        type: boolean
        default: true
      run-lint:
        description: 'Whether to run linting'
        required: false
        type: boolean
        default: true
      run-type-check:
        description: 'Whether to run type checking'
        required: false
        type: boolean
        default: true
      test-command:
        description: 'Command to run tests'
        required: false
        type: string
        default: 'uv run pytest'
    outputs:
      test-results:
        description: 'Test results summary'
        value: ${{ jobs.quality.outputs.test-results }}
      lint-results:
        description: 'Lint results summary'
        value: ${{ jobs.quality.outputs.lint-results }}

jobs:
  quality:
    runs-on: ubuntu-latest
    outputs:
      test-results: ${{ steps.test.outputs.results }}
      lint-results: ${{ steps.lint.outputs.results }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up uv
        uses: astral-sh/setup-uv@v2

      - name: Install Python ${{ inputs.python-version }}
        run: uv python install ${{ inputs.python-version }}

      - name: Install dependencies
        run: uv sync --extra dev

      - name: Run linting
        if: ${{ inputs.run-lint }}
        id: lint
        run: |
          echo "Running Ruff linting for ${{ inputs.service-name }}"
          uv run ruff check src tests --output-format=github
          echo "results=passed" >> $GITHUB_OUTPUT

      - name: Run type checking
        if: ${{ inputs.run-type-check }}
        run: |
          echo "Running type checking for ${{ inputs.service-name }}"
          uv run mypy src/

      - name: Run tests
        if: ${{ inputs.run-tests }}
        id: test
        run: |
          echo "Running tests for ${{ inputs.service-name }}"
          ${{ inputs.test-command }} --junitxml=test-results.xml --cov=src --cov-report=xml
          echo "results=passed" >> $GITHUB_OUTPUT

      - name: Upload test results
        if: ${{ inputs.run-tests && always() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ inputs.service-name }}
          path: |
            test-results.xml
            coverage.xml
          if-no-files-found: ignore

      - name: Upload coverage to Codecov
        if: ${{ inputs.run-tests }}
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: ${{ inputs.service-name }}
          name: ${{ inputs.service-name }}-coverage
          fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Bandit security scan
        run: |
          pip install bandit[toml]
          bandit -r src/ -f json -o bandit-report.json || true

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-${{ inputs.service-name }}
          path: bandit-report.json
          if-no-files-found: ignore

      - name: Run safety check for vulnerabilities
        run: |
          pip install safety
          safety check --json --output safety-report.json || true

      - name: Upload safety check results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: safety-check-${{ inputs.service-name }}
          path: safety-report.json
          if-no-files-found: ignore
