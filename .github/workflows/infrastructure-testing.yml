name: Infrastructure Testing Pipeline

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of infrastructure test'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - cache
        - messaging
        - gateway
        - database

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Phase 2 Infrastructure Integration Tests
  infrastructure-test:
    name: Phase 2 Infrastructure Testing
    runs-on: ubuntu-latest

    strategy:
      matrix:
        test-suite:
          - cache-redis
          - cache-memory
          - messaging-rabbitmq
          - messaging-memory
          - events-postgresql
          - events-memory
          - gateway-full
          - config-management

    services:
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      rabbitmq:
        image: rabbitmq:3.12-management-alpine
        ports:
          - 5672:5672
          - 15672:15672
        env:
          RABBITMQ_DEFAULT_USER: test
          RABBITMQ_DEFAULT_PASS: test
        options: >-
          --health-cmd "rabbitmq-diagnostics ping"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 3

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Set up test environment variables
      run: |
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
        echo "RABBITMQ_URL=amqp://test:test@localhost:5672/" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql+asyncpg://test:test@localhost:5432/test_db" >> $GITHUB_ENV
        echo "TEST_ENVIRONMENT=ci" >> $GITHUB_ENV

    - name: Run cache infrastructure tests
      if: contains(matrix.test-suite, 'cache')
      run: |
        pytest tests/framework/infrastructure/test_cache_manager.py -v -k "${{ matrix.test-suite }}"

    - name: Run messaging infrastructure tests
      if: contains(matrix.test-suite, 'messaging')
      run: |
        pytest tests/framework/infrastructure/test_message_queue.py -v -k "${{ matrix.test-suite }}"

    - name: Run event streaming tests
      if: contains(matrix.test-suite, 'events')
      run: |
        pytest tests/framework/infrastructure/test_event_stream_manager.py -v -k "${{ matrix.test-suite }}"

    - name: Run API gateway tests
      if: contains(matrix.test-suite, 'gateway')
      run: |
        pytest tests/framework/infrastructure/test_api_gateway.py -v -k "${{ matrix.test-suite }}"

    - name: Run configuration management tests
      if: contains(matrix.test-suite, 'config')
      run: |
        pytest tests/framework/infrastructure/test_config_manager.py -v

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: infrastructure-test-results-${{ matrix.test-suite }}
        path: |
          test-results.xml
          .coverage

  # End-to-End Infrastructure Tests
  e2e-infrastructure:
    name: End-to-End Infrastructure Test
    runs-on: ubuntu-latest
    needs: infrastructure-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Kind cluster
      uses: helm/kind-action@v1.8.0
      with:
        cluster_name: test-cluster
        config: k8s/kind-cluster-config.yaml

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Deploy Phase 2 infrastructure to Kind
      run: |
        # Create namespace
        kubectl create namespace microservices-test

        # Deploy with testing values
        helm install test-infrastructure k8s/ \
          --namespace microservices-test \
          --values k8s/values/testing.yaml \
          --set service.name=test-service \
          --set image.repository=nginx \
          --set image.tag=alpine \
          --wait --timeout=10m

    - name: Verify infrastructure deployment
      run: |
        # Check all pods are running
        kubectl wait --for=condition=Ready pod --all -n microservices-test --timeout=300s

        # Check services are accessible
        kubectl get services -n microservices-test

        # Test Redis connectivity
        kubectl run redis-test --image=redis:alpine --rm -i --restart=Never -n microservices-test -- \
          redis-cli -h redis ping

        # Test RabbitMQ connectivity
        kubectl run rabbitmq-test --image=curlimages/curl:latest --rm -i --restart=Never -n microservices-test -- \
          curl -f http://rabbitmq:15672

    - name: Run infrastructure integration tests in cluster
      run: |
        # Deploy test runner pod
        kubectl run infrastructure-tests \
          --image=python:3.11-slim \
          --rm -i --restart=Never \
          -n microservices-test \
          --overrides='
        {
          "spec": {
            "containers": [{
              "name": "infrastructure-tests",
              "image": "python:3.11-slim",
              "command": ["python", "-c"],
              "args": ["import requests; print(\"Infrastructure test completed\")"],
              "env": [
                {"name": "REDIS_URL", "value": "redis://redis:6379"},
                {"name": "RABBITMQ_URL", "value": "amqp://guest:guest@rabbitmq:5672/"}
              ]
            }]
          }
        }'

    - name: Cleanup test cluster
      if: always()
      run: |
        kubectl delete namespace microservices-test --ignore-not-found=true

  # Performance Baseline Tests
  performance-baseline:
    name: Infrastructure Performance Baseline
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379

      rabbitmq:
        image: rabbitmq:3.12-management-alpine
        ports:
          - 5672:5672
        env:
          RABBITMQ_DEFAULT_USER: test
          RABBITMQ_DEFAULT_PASS: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run cache performance tests
      run: |
        python tests/performance/cache_benchmark.py

    - name: Run messaging performance tests
      run: |
        python tests/performance/messaging_benchmark.py

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-baseline-results
        path: |
          performance-results.json
          benchmarks/
