name: Reusable Security

on:
  workflow_call:
    inputs:
      service-name:
        description: 'Name of the service being scanned'
        required: true
        type: string
      image-tag:
        description: 'Container image tag to scan'
        required: false
        type: string
        default: 'latest'
      registry:
        description: 'Container registry'
        required: false
        type: string
        default: 'ghcr.io'
      fail-on-high:
        description: 'Fail on high severity vulnerabilities'
        required: false
        type: boolean
        default: false
      fail-on-critical:
        description: 'Fail on critical severity vulnerabilities'
        required: false
        type: boolean
        default: true
      scan-code:
        description: 'Whether to scan source code'
        required: false
        type: boolean
        default: true
      scan-dependencies:
        description: 'Whether to scan dependencies'
        required: false
        type: boolean
        default: true
      scan-container:
        description: 'Whether to scan container image'
        required: false
        type: boolean
        default: true

jobs:
  code-security:
    if: ${{ inputs.scan-code }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Bandit security scan
        run: |
          pip install bandit[toml]
          bandit -r src/ -f json -o bandit-report.json -ll
          bandit -r src/ -f txt

      - name: Upload Bandit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report-${{ inputs.service-name }}
          path: bandit-report.json

      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Upload Semgrep results
        if: always()
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
          category: semgrep-${{ inputs.service-name }}

  dependency-security:
    if: ${{ inputs.scan-dependencies }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install uv
        run: pip install uv

      - name: Install dependencies
        run: uv sync

      - name: Run Safety check
        run: |
          pip install safety
          safety check --json --output safety-report.json --continue-on-error
          safety check

      - name: Upload Safety results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: safety-report-${{ inputs.service-name }}
          path: safety-report.json

      - name: Run pip-audit
        run: |
          pip install pip-audit
          pip-audit --format=json --output=pip-audit-report.json
          pip-audit

      - name: Upload pip-audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-report-${{ inputs.service-name }}
          path: pip-audit-report.json

  container-security:
    if: ${{ inputs.scan-container }}
    runs-on: ubuntu-latest

    steps:
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Scan container image
        run: |
          IMAGE_NAME="${{ inputs.registry }}/${{ github.repository_owner }}/${{ inputs.service-name }}:${{ inputs.image-tag }}"
          echo "Scanning image: $IMAGE_NAME"

          # Scan for vulnerabilities
          trivy image --format sarif --output trivy-results.sarif "$IMAGE_NAME"
          trivy image --format json --output trivy-results.json "$IMAGE_NAME"

          # Check for critical vulnerabilities
          CRITICAL_COUNT=$(trivy image --format json "$IMAGE_NAME" | jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL") | length' | wc -l)
          HIGH_COUNT=$(trivy image --format json "$IMAGE_NAME" | jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH") | length' | wc -l)

          echo "Critical vulnerabilities found: $CRITICAL_COUNT"
          echo "High vulnerabilities found: $HIGH_COUNT"

          # Fail if configured to do so
          if [ "${{ inputs.fail-on-critical }}" = "true" ] && [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "❌ Critical vulnerabilities found, failing build"
            exit 1
          fi

          if [ "${{ inputs.fail-on-high }}" = "true" ] && [ "$HIGH_COUNT" -gt 0 ]; then
            echo "❌ High severity vulnerabilities found, failing build"
            exit 1
          fi

      - name: Upload Trivy scan results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
          category: trivy-${{ inputs.service-name }}

      - name: Upload detailed Trivy results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report-${{ inputs.service-name }}
          path: trivy-results.json

      - name: Scan image configuration
        run: |
          IMAGE_NAME="${{ inputs.registry }}/${{ github.repository_owner }}/${{ inputs.service-name }}:${{ inputs.image-tag }}"

          # Scan for misconfigurations
          trivy image --security-checks config --format sarif --output trivy-config.sarif "$IMAGE_NAME"
          trivy image --security-checks config "$IMAGE_NAME"

      - name: Upload configuration scan results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-config.sarif
          category: trivy-config-${{ inputs.service-name }}

  security-summary:
    needs: [code-security, dependency-security, container-security]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Generate security summary
        run: |
          echo "## Security Scan Summary for ${{ inputs.service-name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### Scan Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Security**: ${{ inputs.scan-code }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependency Security**: ${{ inputs.scan-dependencies }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Container Security**: ${{ inputs.scan-container }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Fail on Critical**: ${{ inputs.fail-on-critical }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Fail on High**: ${{ inputs.fail-on-high }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Security**: ${{ needs.code-security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependency Security**: ${{ needs.dependency-security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Container Security**: ${{ needs.container-security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.code-security.result }}" = "failure" ] || [ "${{ needs.dependency-security.result }}" = "failure" ] || [ "${{ needs.container-security.result }}" = "failure" ]; then
            echo "❌ **Overall Status**: FAILED - Security issues found" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **Overall Status**: PASSED - No critical security issues found" >> $GITHUB_STEP_SUMMARY
          fi
