# Marty Microservices Framework - Pre-commit Configuration
# Ensures code quality, type safety, and framework integrity before commits

repos:
  # Basic code formatting and linting
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
        name: Remove trailing whitespace
      - id: end-of-file-fixer
        name: Fix end of files
      - id: check-yaml
        name: Check YAML syntax
        exclude: ^microservice_project_template/k8s/.*\.yaml$
      - id: check-json
        name: Check JSON syntax
      - id: check-toml
        name: Check TOML syntax
      - id: check-merge-conflict
        name: Check for merge conflicts
      - id: check-added-large-files
        name: Check for large files
        args: ['--maxkb=1000']
      - id: check-case-conflict
        name: Check for case conflicts
      - id: check-executables-have-shebangs
        name: Check executables have shebangs
      - id: mixed-line-ending
        name: Check line endings

  # Python code formatting with Black
  - repo: https://github.com/psf/black
    rev: 23.7.0
    hooks:
      - id: black
        name: Format Python code with Black
        language_version: python3
        args: [--line-length=88]

  # Import sorting with isort
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        name: Sort Python imports with isort
        args: [--profile=black, --line-length=88]

  # Python linting with Ruff (fast alternative to flake8, pylint)
  # Temporarily disabled due to parent directory ruff config conflict
  # - repo: https://github.com/astral-sh/ruff-pre-commit
  #   rev: v0.0.284
  #   hooks:
  #     - id: ruff
  #       name: Lint Python code with Ruff
  #       args: [--fix, --exit-non-zero-on-fix]
  #       exclude: ^microservice_project_template/

  # Security checks with bandit - temporarily disabled due to dependency issues
  # - repo: https://github.com/PyCQA/bandit
  #   rev: 1.7.5
  #   hooks:
  #     - id: bandit
  #       name: Security checks with Bandit
  #       args: [-r, scripts/, -f, json]
  #       exclude: ^(tests/|test_)

  # Framework-specific hooks
  - repo: local
    hooks:
      # Type checking with MyPy
      - id: mypy-type-check
        name: MyPy Type Checking
        entry: python3 -m mypy
        language: system
        files: ^scripts/.*\.py$
        args: [scripts/, --config-file=mypy.ini]
        require_serial: true
        pass_filenames: false

      # Template validation
      - id: template-validation
        name: Validate Service Templates
        entry: python3
        language: system
        files: ^(scripts/.*\.py|service/.*\.j2|mypy\.ini|requirements\.txt)$
        args: [scripts/validate_templates.py]
        require_serial: true
        pass_filenames: false

      # Framework tests
      - id: framework-tests
        name: Run Framework Tests
        entry: python3
        language: system
        files: ^(scripts/.*\.py|service/.*\.j2|mypy\.ini|requirements\.txt|Makefile)$
        args: [scripts/test_framework.py]
        require_serial: true
        pass_filenames: false

      # Dependencies check
      - id: dependencies-check
        name: Check Framework Dependencies
        entry: bash
        language: system
        files: ^requirements\.txt$
        args: [-c, 'python3 -c "import jinja2, pathlib, ast, argparse; print(\"✅ All dependencies available\")"']
        require_serial: true
        pass_filenames: false

      # Documentation consistency
      - id: docs-consistency
        name: Check Documentation Consistency
        entry: bash
        language: system
        files: ^(README\.md|.*\.md|scripts/.*\.py)$
        args: [-c, 'grep -q "Marty Microservices Framework" README.md && echo "✅ Documentation title consistent"']
        require_serial: true
        pass_filenames: false

      # Makefile validation
      - id: makefile-validation
        name: Validate Makefile Targets
        entry: bash
        language: system
        files: ^Makefile$
        args: [-c, 'make -n help > /dev/null && echo "✅ Makefile syntax valid"']
        require_serial: true
        pass_filenames: false

      # Service generation smoke test
      - id: service-generation-test
        name: Service Generation Smoke Test
        entry: bash
        language: system
        files: ^(scripts/generate_service\.py|service/.*\.j2)$
        args:
          - -c
          - |
            TEMP_DIR=$(mktemp -d)
            CURRENT_DIR=$(pwd)
            cd "$TEMP_DIR"
            python3 "$CURRENT_DIR/scripts/generate_service.py" fastapi smoke-test --output-dir ./test_output
            if [ -d "./test_output/smoke_test" ]; then
              echo "✅ Service generation smoke test passed"
              rm -rf "$TEMP_DIR"
            else
              echo "❌ Service generation smoke test failed"
              rm -rf "$TEMP_DIR"
              exit 1
            fi
        require_serial: true
        pass_filenames: false
        always_run: true

# Global pre-commit configuration
default_language_version:
  python: python3

# Exclude patterns
exclude: |
  (?x)^(
    \.mypy_cache/.*|
    \.pytest_cache/.*|
    \.ruff_cache/.*|
    __pycache__/.*|
    .*\.pyc|
    src/test_.*|
    src/demo_.*|
    temp/.*|
    microservice_project_template/\.venv/.*|
    .*\.log
  )$

# Fail fast - stop on first failure
fail_fast: true

# Minimum pre-commit version
minimum_pre_commit_version: 3.3.0
