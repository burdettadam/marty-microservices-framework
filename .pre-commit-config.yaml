# Marty Microservices Framework - Pre-commit Configuration
# Ensures code quality, type safety, and framework integrity before commits

repos:
  # Basic code formatting and linting
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
        name: Remove trailing whitespace
      - id: end-of-file-fixer
        name: Fix end of files
      - id: check-yaml
        name: Check YAML syntax
        exclude: ^(microservice_project_template/k8s/.*\.yaml|k8s/.*\.yaml|service-mesh/.*\.yaml|security/.*\.yaml)$
        args: [--allow-multiple-documents]
      - id: check-json
        name: Check JSON syntax
      - id: check-toml
        name: Check TOML syntax
      - id: check-merge-conflict
        name: Check for merge conflicts
      - id: check-added-large-files
        name: Check for large files
        args: ['--maxkb=1000']

  # Import sorting with isort
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        name: Sort Python imports with isort
        args: [--profile=black, --line-length=88]

  # Python linting with Ruff (fast alternative to flake8, pylint)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.8.0
    hooks:
      - id: ruff
        name: Lint Python code with Ruff
        args: [--fix, --exit-non-zero-on-fix]
        exclude: ^templates/.*\.py$|^microservice_project_template/

  # Code complexity checks
  # Code Quality Analysis - Comprehensive complexity and length checks
  - repo: local
    hooks:
      - id: code-quality-check
        name: Code Quality Check (Complexity & Length)
        entry: uv run python scripts/check_code_quality.py
        language: system
        files: \.py$
        exclude: ^(tests/|templates/|examples/|microservice_project_template/|quarantine/)
        require_serial: true
        pass_filenames: false

  # Security checks with bandit (using development version of rich for Python 3.13 compatibility)
  - repo: https://github.com/PyCQA/bandit
    rev: 1.8.0
    hooks:
      - id: bandit
        name: Security checks with Bandit
        # Skip the following checks:
        # B101: assert_used - used in tests
        # B104: hardcoded_bind_all_interfaces - default 0.0.0.0 for config examples
        # B105/B106/B107: hardcoded_password - constants and test values
        # B108: hardcoded_tmp_directory - legitimate /tmp usage in dev tools
        # B110/B112: try_except_pass/continue - cleanup code patterns
        # B301/B403: pickle - used securely in serialization framework
        # B311: random - used for testing, jitter, and non-crypto purposes
        # B324: weak hash (MD5) - used for non-security checksums and consistent hashing
        # B404: subprocess - needed for CLI tools and deployment automation
        # B501: SSL verification disabled - only in health check examples
        # B603/B607: subprocess execution - needed for CLI and deployment tools
        # NOTE: The following keys were previously mis-indented which caused pre-commit
        #       to treat them as unexpected top-level keys. They must be indented
        #       under the hook entry to take effect.
        args: ["-r","src/framework","-s","B101,B104,B105,B106,B108,B110,B112,B301,B307,B311,B403,B404,B501,B603,B607,B324","--exclude","src/framework/testing/,tests/,templates/,examples/,microservice_project_template/,/.venv/,*/.venv/"]
        pass_filenames: false
        # Exclude tests, templates, examples, demos, project scaffold
        exclude: ^(src/framework/testing/|tests/|templates/|examples/|.*_example\.py|.*demo.*\.py|setup_dev\.py|microservice_project_template/|\.venv/)

  # Framework-specific hooks
  - repo: local
    hooks:
      # Type checking with MyPy - TEMPORARILY DISABLED (Python 3.13 compatibility issue)
      # - id: mypy-type-check
      #   name: MyPy Type Checking
      #   entry: uv run mypy
      #   language: system
      #   files: ^scripts/.*\.py$
      #   args: [scripts/verify_security_framework.py, --config-file=mypy.ini]
      #   require_serial: true
      #   pass_filenames: false

      # Template validation - TEMPORARILY DISABLED (Python 3.13 compatibility)
      # - id: template-validation
      #   name: Validate Service Templates
      #   entry: uv run python
      #   language: system
      #   files: ^(scripts/.*\.py|service/.*\.j2|mypy\.ini|requirements\.txt)$
      #   args: [scripts/validate_templates.py]
      #   require_serial: true
      #   pass_filenames: false

      # Framework tests - TEMPORARILY DISABLED (Python 3.13 compatibility)
      # - id: framework-tests
      #   name: Run Framework Tests
      #   entry: uv run python
      #   language: system
      #   files: ^(scripts/.*\.py|service/.*\.j2|mypy\.ini|requirements\.txt|Makefile|observability/.*)$
      #   args: [scripts/test_framework.py]
      #   require_serial: true
      #   pass_filenames: false

      # Observability validation - TEMPORARILY DISABLED (Python 3.13 compatibility)
      # - id: observability-validation
      #   name: Validate Observability Components
      #   entry: uv run python
      #   language: system
      #   files: ^observability/.*\.py$
      #   args: [scripts/validate_observability.py]
      #   require_serial: true
      #   pass_filenames: false

      # Dependencies check
      - id: dependencies-check
        name: Check Framework Dependencies
        entry: bash
        language: system
        files: ^requirements\.txt$
        args: [-c, 'uv run python -c "import jinja2, pathlib, ast, argparse; print(\"✅ All dependencies available\")"']
        require_serial: true
        pass_filenames: false

      # Documentation consistency
      - id: docs-consistency
        name: Check Documentation Consistency
        entry: bash
        language: system
        files: ^(README\.md|.*\.md|scripts/.*\.py)$
        args: [-c, 'grep -q "Marty Microservices Framework" README.md && echo "✅ Documentation title consistent"']
        require_serial: true
        pass_filenames: false

      # Makefile validation
      - id: makefile-validation
        name: Validate Makefile Targets
        entry: bash
        language: system
        files: ^Makefile$
        args: [-c, 'make -n help > /dev/null && echo "✅ Makefile syntax valid"']
        require_serial: true
        pass_filenames: false

      # Service generation smoke test
      - id: service-generation-test
        name: Service Generation Smoke Test
        entry: bash
        language: system
        files: ^(scripts/generate_service\.py|service/.*\.j2)$
        args:
          - -c
          - |
            TEMP_DIR=$(mktemp -d)
            CURRENT_DIR=$(pwd)
            cd "$CURRENT_DIR"
            uv run python scripts/generate_service.py fastapi smoke-test --output-dir "$TEMP_DIR/test_output"
            if [ -d "$TEMP_DIR/test_output/smoke_test" ]; then
              echo "✅ Service generation smoke test passed"
              rm -rf "$TEMP_DIR"
            else
              echo "❌ Service generation smoke test failed"
              rm -rf "$TEMP_DIR"
              exit 1
            fi
        require_serial: true
        pass_filenames: false
        always_run: true

      # Database layer validation
      - id: database-layer-validation
        name: Validate Database Abstraction Layer
        entry: bash
        language: system
        files: ^templates/.*/database/.*\.(ts|go|java|py)$|^templates/.*/internal/database/.*\.go$
        args:
          - -c
          - |
            echo "🔍 Validating database abstraction layer..."

            # Check Node.js database layer
            if [ -d "templates/nodejs-service/database" ]; then
              echo "  Checking Node.js database layer..."
              if [ -f "templates/nodejs-service/database/manager.ts" ] &&
                 [ -f "templates/nodejs-service/database/config.ts" ] &&
                 [ -f "templates/nodejs-service/database/repository.ts" ] &&
                 [ -f "templates/nodejs-service/database/index.ts" ]; then
                echo "    ✅ Node.js database layer structure valid"

                # Check for proper patterns
                if grep -q "DatabaseManager" templates/nodejs-service/database/manager.ts &&
                   grep -q "singleton" templates/nodejs-service/database/manager.ts &&
                   grep -q "BaseRepository" templates/nodejs-service/database/repository.ts; then
                  echo "    ✅ Node.js database patterns implemented correctly"
                else
                  echo "    ❌ Node.js database patterns missing or incomplete"
                  exit 1
                fi
              else
                echo "    ❌ Node.js database layer files missing"
                exit 1
              fi
            fi

            # Check Go database layer
            if [ -d "templates/go-service/internal/database" ]; then
              echo "  Checking Go database layer..."
              if [ -f "templates/go-service/internal/database/database.go" ]; then
                echo "    ✅ Go database layer structure valid"

                # Check for proper patterns
                if grep -q "DatabaseManager" templates/go-service/internal/database/database.go &&
                   grep -q "GetInstance" templates/go-service/internal/database/database.go &&
                   grep -q "sync.Once" templates/go-service/internal/database/database.go; then
                  echo "    ✅ Go database patterns implemented correctly"
                else
                  echo "    ❌ Go database patterns missing or incomplete"
                  exit 1
                fi
              else
                echo "    ❌ Go database layer files missing"
                exit 1
              fi
            fi

            echo "✅ Database abstraction layer validation passed"
        require_serial: true
        pass_filenames: false

      # Service isolation validation
      - id: service-isolation-validation
        name: Validate Service Isolation Patterns
        entry: bash
        language: system
        files: ^templates/.*/.*\.(ts|go|java|py|yaml|json)$
        args:
          - -c
          - |
            echo "🔍 Validating service isolation patterns..."

            # Check for service-specific database naming
            if grep -r "service_name.*_db\|SERVICE_NAME" templates/ --include="*.ts" --include="*.go" --include="*.py" >/dev/null 2>&1; then
              echo "  ✅ Service-specific database naming found"
            else
              echo "  ❌ Service-specific database naming patterns missing"
              exit 1
            fi

            # Check for proper environment configuration
            if grep -r "SERVICE_NAME" templates/ --include="*.ts" --include="*.go" --include="*.env*" >/dev/null 2>&1; then
              echo "  ✅ Service name configuration found"
            else
              echo "  ❌ Service name environment configuration missing"
              exit 1
            fi

            echo "✅ Service isolation validation passed"
        require_serial: true
        pass_filenames: false

      # Template syntax validation
      - id: template-syntax-validation
        name: Validate Template Syntax and Structure
        entry: bash
        language: system
        files: ^templates/.*\.j2$|^templates/.*\.yaml$|^templates/.*\.json\.j2$
        args:
          - -c
          - |
            echo "🔍 Validating template syntax..."

            # Activate virtual environment and check for proper Jinja2 syntax in .j2 files
            source ../../../.venv/bin/activate
            for file in $(find templates -name "*.j2" 2>/dev/null); do
              echo "  Checking $file..."
              if python -c "
            import jinja2
            try:
                with open('$file', 'r') as f:
                    content = f.read()
                env = jinja2.Environment()
                env.parse(content)
                print('    ✅ Valid Jinja2 syntax')
            except Exception as e:
                print(f'    ❌ Invalid Jinja2 syntax: {e}')
                exit(1)
            "; then
                continue
              else
                exit 1
              fi
            done

            # Check template.yaml files for required fields
            for file in $(find templates -name "template.yaml" 2>/dev/null); do
              echo "  Checking $file..."
              if grep -q "name:" "$file" && grep -q "description:" "$file" && grep -q "variables:" "$file"; then
                echo "    ✅ Template YAML structure valid"
              else
                echo "    ❌ Template YAML missing required fields (name, description, variables)"
                exit 1
              fi
            done

            echo "✅ Template syntax validation passed"
        require_serial: true
        pass_filenames: false

      # Multi-language template consistency
      - id: template-consistency-validation
        name: Validate Multi-Language Template Consistency
        entry: bash
        language: system
        files: ^templates/.*$
        args:
          - -c
          - |
            echo "🔍 Validating template consistency across languages..."

            # Check that all service templates have similar structure
            REQUIRED_DIRS="nodejs-service go-service"
            REQUIRED_FILES="README.md template.yaml"

            for service_dir in $REQUIRED_DIRS; do
              if [ -d "templates/$service_dir" ]; then
                echo "  Checking $service_dir..."
                for req_file in $REQUIRED_FILES; do
                  if [ -f "templates/$service_dir/$req_file" ]; then
                    echo "    ✅ $req_file found"
                  else
                    echo "    ❌ $req_file missing in $service_dir"
                    exit 1
                  fi
                done

                # Check for database abstraction in services that should have it
                if [ "$service_dir" = "nodejs-service" ] || [ "$service_dir" = "go-service" ]; then
                  if [ -d "templates/$service_dir/database" ] || [ -d "templates/$service_dir/internal/database" ]; then
                    echo "    ✅ Database abstraction layer found"
                  else
                    echo "    ❌ Database abstraction layer missing in $service_dir"
                    exit 1
                  fi
                fi
              else
                echo "  ❌ Required service template directory missing: $service_dir"
                exit 1
              fi
            done

            echo "✅ Template consistency validation passed"
        require_serial: true
        pass_filenames: false

      # CLI functionality validation
      - id: cli-functionality-validation
        name: Validate CLI Functionality
        entry: bash
        language: system
        files: ^marty_cli/.*\.py$|^CLI_README\.md$
        args:
          - -c
          - |
            echo "🔍 Validating CLI functionality..."

            # Check CLI module structure
            if [ -f "marty_cli/__init__.py" ] && [ -f "marty_cli/__main__.py" ]; then
              echo "  ✅ CLI module structure valid"
            else
              echo "  ❌ CLI module structure incomplete"
              exit 1
            fi

            # Test CLI import with environment compatibility handling
            if command -v python3.11 >/dev/null 2>&1; then
              PY_CMD=python3.11
            else
              PY_CMD="uv run python"
            fi
            export PYTHONPATH="$(pwd):$PYTHONPATH"
            if $PY_CMD -c "import marty_cli; print('CLI import successful')" 2>/dev/null; then
              echo "  ✅ CLI module imports successfully (via $PY_CMD)"
            else
              echo "  ❌ CLI module import failed (tried $PY_CMD)"
              exit 1
            fi

            # Check for CLI documentation
            if [ -f "CLI_README.md" ]; then
              echo "  ✅ CLI documentation found"
            else
              echo "  ❌ CLI documentation missing"
              exit 1
            fi

            echo "✅ CLI functionality validation passed"
        require_serial: true
        pass_filenames: false

      # Dashboard component validation
      - id: dashboard-validation
        name: Validate Dashboard Components
        entry: bash
        language: system
        files: ^dashboard/.*$
        args:
          - -c
          - |
            echo "🔍 Validating dashboard components..."

            # Check backend structure
            if [ -d "dashboard/backend" ]; then
              echo "  Checking backend structure..."
              if [ -f "dashboard/backend/marty_dashboard/main.py" ] &&
                 [ -f "dashboard/backend/marty_dashboard/config.py" ] &&
                 [ -d "dashboard/backend/marty_dashboard/middleware" ]; then
                echo "    ✅ Backend structure valid"
              else
                echo "    ❌ Backend structure incomplete"
                exit 1
              fi
            fi

            # Check frontend structure
            if [ -d "dashboard/frontend" ]; then
              echo "  Checking frontend structure..."
              if [ -f "dashboard/frontend/package.json" ] &&
                 [ -f "dashboard/frontend/vite.config.ts" ]; then
                echo "    ✅ Frontend structure valid"
              else
                echo "    ❌ Frontend structure incomplete"
                exit 1
              fi
            fi

            echo "✅ Dashboard validation passed"
        require_serial: true
        pass_filenames: false

# Global pre-commit configuration
default_language_version:
  python: python3

# Exclude patterns
exclude: |
  (?x)^(
    \.mypy_cache/.*|
    \.pytest_cache/.*|
    \.ruff_cache/.*|
    __pycache__/.*|
    .*\.pyc|
    src/test_.*|
    src/demo_.*|
    temp/.*|
    microservice_project_template/\.venv/.*|
    .*\.log
  )$

# Fail fast - stop on first failure
fail_fast: true

# Minimum pre-commit version
minimum_pre_commit_version: 3.3.0
