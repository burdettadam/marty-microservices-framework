version: '3.8'

services:
  # Elasticsearch for log storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: marty-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    networks:
      - observability
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2g
        reservations:
          memory: 1g

  # Logstash for log processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: marty-logstash
    ports:
      - "5044:5044"  # Beats input
      - "5000:5000"  # JSON TCP input
      - "9600:9600"  # Logstash monitoring
    volumes:
      - ./config/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./config/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./config/logstash/pipelines.yml:/usr/share/logstash/config/pipelines.yml:ro
      - ./patterns:/usr/share/logstash/patterns:ro
    environment:
      - "LS_JAVA_OPTS=-Xmx1g -Xms1g"
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - observability
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1.5g
        reservations:
          memory: 1g

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: marty-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=kibana
      - SERVER_HOST=0.0.0.0
      - XPACK_SECURITY_ENABLED=false
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=min-32-byte-long-strong-encryption-key
    volumes:
      - ./config/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
      - ./dashboards:/usr/share/kibana/dashboards:ro
    networks:
      - observability
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    deploy:
      resources:
        limits:
          memory: 1g
        reservations:
          memory: 512m

  # Filebeat for log shipping
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: marty-filebeat
    user: root
    command: filebeat -e -strict.perms=false
    volumes:
      - ./config/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/log:/host/var/log:ro
      - filebeat_data:/usr/share/filebeat/data
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - LOGSTASH_HOSTS=logstash:5044
    networks:
      - observability
    depends_on:
      logstash:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512m
        reservations:
          memory: 256m

  # Fluent Bit (alternative to Filebeat)
  fluent-bit:
    image: fluent/fluent-bit:2.2
    container_name: marty-fluent-bit
    ports:
      - "24224:24224"  # Forward input
      - "2020:2020"    # HTTP monitoring
    volumes:
      - ./config/fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - ./config/fluent-bit/parsers.conf:/fluent-bit/etc/parsers.conf:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/log:/host/var/log:ro
    environment:
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
    networks:
      - observability
    depends_on:
      elasticsearch:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 256m
        reservations:
          memory: 128m

  # Redis for log buffering
  redis-logs:
    image: redis:7-alpine
    container_name: marty-redis-logs
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    volumes:
      - redis_logs_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - observability
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512m
        reservations:
          memory: 128m

  # Log Analytics and Processing Service
  log-processor:
    build:
      context: .
      dockerfile: Dockerfile.log-processor
    container_name: marty-log-processor
    environment:
      - ELASTICSEARCH_HOST=elasticsearch:9200
      - REDIS_HOST=redis-logs:6379
      - LOG_LEVEL=INFO
      - PROCESSING_INTERVAL=30
    volumes:
      - ./config/log-processor:/app/config:ro
      - ./scripts/log-processor:/app/scripts:ro
    networks:
      - observability
    depends_on:
      elasticsearch:
        condition: service_healthy
      redis-logs:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512m
        reservations:
          memory: 256m

  # Log Metrics Exporter for Prometheus
  log-metrics-exporter:
    build:
      context: .
      dockerfile: Dockerfile.log-metrics
    container_name: marty-log-metrics
    ports:
      - "8090:8090"  # Metrics endpoint
    environment:
      - ELASTICSEARCH_HOST=elasticsearch:9200
      - METRICS_PORT=8090
      - SCRAPE_INTERVAL=30
    volumes:
      - ./config/log-metrics:/app/config:ro
    networks:
      - observability
    depends_on:
      elasticsearch:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 256m
        reservations:
          memory: 128m

volumes:
  elasticsearch_data:
    driver: local
  filebeat_data:
    driver: local
  redis_logs_data:
    driver: local

networks:
  observability:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
