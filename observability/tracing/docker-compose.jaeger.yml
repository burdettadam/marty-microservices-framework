# Jaeger Distributed Tracing Stack for Marty Microservices Framework
# Production-ready Jaeger deployment with Elasticsearch backend

version: '3.8'

services:
  # Elasticsearch for trace storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: jaeger-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - jaeger_elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - jaeger
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Jaeger Collector
  jaeger-collector:
    image: jaegertracing/jaeger-collector:latest
    container_name: jaeger-collector
    command:
      - "--es.server-urls=http://elasticsearch:9200"
      - "--es.num-shards=1"
      - "--es.num-replicas=0"
      - "--log-level=info"
      - "--collector.zipkin.host-port=:9411"
      - "--collector.grpc.tls.enabled=false"
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
    ports:
      - "14250:14250"   # gRPC
      - "14268:14268"   # HTTP
      - "9411:9411"     # Zipkin
    networks:
      - jaeger
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped

  # Jaeger Query (UI)
  jaeger-query:
    image: jaegertracing/jaeger-query:latest
    container_name: jaeger-query
    command:
      - "--es.server-urls=http://elasticsearch:9200"
      - "--span-storage.type=elasticsearch"
      - "--log-level=info"
      - "--query.max-clock-skew-adjustment=0s"
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - no_proxy=localhost
    ports:
      - "16686:16686"
    networks:
      - jaeger
    depends_on:
      - jaeger-collector
    restart: unless-stopped

  # Jaeger Agent (optional, for client-side instrumentation)
  jaeger-agent:
    image: jaegertracing/jaeger-agent:latest
    container_name: jaeger-agent
    command:
      - "--reporter.grpc.host-port=jaeger-collector:14250"
      - "--log-level=info"
    ports:
      - "6831:6831/udp"  # Thrift compact
      - "6832:6832/udp"  # Thrift binary
      - "5778:5778"      # HTTP
    networks:
      - jaeger
    depends_on:
      - jaeger-collector
    restart: unless-stopped

  # Jaeger Dependencies (service dependency analysis)
  jaeger-dependencies:
    image: jaegertracing/spark-dependencies:latest
    container_name: jaeger-dependencies
    environment:
      - STORAGE=elasticsearch
      - ES_NODES=http://elasticsearch:9200
      - ES_NODES_WAN_ONLY=true
    networks:
      - jaeger
    depends_on:
      - elasticsearch
    # Run once daily at 2 AM
    deploy:
      restart_policy:
        condition: none
    profiles:
      - dependencies

  # OTEL Collector (optional, for OTLP protocol support)
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command:
      - "--config=/etc/otel-collector-config.yaml"
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317"     # OTLP gRPC
      - "4318:4318"     # OTLP HTTP
      - "8888:8888"     # Metrics
      - "8889:8889"     # Prometheus metrics
    networks:
      - jaeger
    depends_on:
      - jaeger-collector
    restart: unless-stopped

volumes:
  jaeger_elasticsearch_data:
    driver: local

networks:
  jaeger:
    driver: bridge
    name: jaeger-network
