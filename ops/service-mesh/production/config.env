# Production Service Mesh Configuration
# Use this file to customize the service mesh deployment

# =============================================================================
# CLUSTER CONFIGURATION
# =============================================================================

# Primary cluster configuration
CLUSTER_NAME="marty-production"
NETWORK_NAME="marty-prod-network"
REGION="us-west-2"
ZONE="us-west-2a"

# =============================================================================
# MULTI-CLUSTER CONFIGURATION
# =============================================================================

# Set to true to enable multi-cluster features
ENABLE_MULTICLUSTER=false

# Remote cluster configuration (only needed if ENABLE_MULTICLUSTER=true)
REMOTE_CLUSTER_NAME="marty-secondary"
REMOTE_CLUSTER_ENDPOINT=""  # Set this to the remote cluster's API endpoint
REMOTE_NETWORK_NAME="marty-secondary-network"

# Base64 encoded kubeconfig for remote cluster
# Generate with: kubectl config view --flatten --minify | base64 -w 0
REMOTE_CLUSTER_KUBECONFIG_BASE64=""

# =============================================================================
# SERVICE MESH SELECTION
# =============================================================================

# Choose service mesh: istio or linkerd
MESH_TYPE="istio"

# Mesh-specific configuration
ISTIO_VERSION="1.20.0"
LINKERD_VERSION="stable-2.14.5"

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# mTLS settings
MTLS_MODE="STRICT"  # STRICT, PERMISSIVE, or DISABLE

# JWT Authentication (leave empty to disable)
JWT_ISSUER="https://auth.marty-msf.local"
JWT_JWKS_URI="https://auth.marty-msf.local/.well-known/jwks.json"
JWT_AUDIENCES="marty-microservices"

# Network policy enforcement
ENABLE_NETWORK_POLICIES=true

# =============================================================================
# OBSERVABILITY CONFIGURATION
# =============================================================================

# Enable observability stack integration
ENABLE_OBSERVABILITY=true

# Tracing configuration
JAEGER_ENDPOINT="jaeger-collector.observability:14268"
JAEGER_SAMPLING_RATE="1.0"  # 100% sampling for production (adjust as needed)

# Metrics configuration
PROMETHEUS_NAMESPACE="observability"
GRAFANA_NAMESPACE="observability"

# =============================================================================
# TRAFFIC MANAGEMENT
# =============================================================================

# Circuit breaker settings
CIRCUIT_BREAKER_ERRORS=3
CIRCUIT_BREAKER_INTERVAL="30s"
CIRCUIT_BREAKER_EJECTION_TIME="30s"
CIRCUIT_BREAKER_MAX_EJECTION_PERCENT=50

# Retry policy settings
RETRY_ATTEMPTS=3
RETRY_TIMEOUT="10s"
RETRY_CONDITIONS="gateway-error,connect-failure,refused-stream"

# Rate limiting settings
RATE_LIMIT_TOKENS=1000
RATE_LIMIT_REFILL_RATE=500
RATE_LIMIT_REFILL_INTERVAL="60s"

# =============================================================================
# GATEWAY CONFIGURATION
# =============================================================================

# Ingress gateway settings
INGRESS_GATEWAY_TYPE="LoadBalancer"  # LoadBalancer, NodePort, or ClusterIP

# Cloud provider specific annotations for LoadBalancer
# AWS
AWS_LB_TYPE="nlb"  # nlb or elb
AWS_LB_SCHEME="internet-facing"  # internet-facing or internal

# Azure (uncomment if using Azure)
# AZURE_LB_INTERNAL="false"

# GCP (uncomment if using GCP)
# GCP_LB_TYPE="External"

# Domain configuration
API_DOMAIN="api.marty-msf.local"
MONITORING_DOMAIN="monitoring.marty-msf.local"
TRACING_DOMAIN="tracing.marty-msf.local"

# TLS certificate configuration
TLS_SECRET_NAME="marty-msf-tls-secret"
OBSERVABILITY_TLS_SECRET_NAME="observability-tls-secret"

# =============================================================================
# NAMESPACE CONFIGURATION
# =============================================================================

# Primary namespace for framework services
FRAMEWORK_NAMESPACE="microservice-framework"

# Additional namespaces to enable mesh injection
ADDITIONAL_NAMESPACES="observability"

# =============================================================================
# RESOURCE LIMITS
# =============================================================================

# Control plane resource limits
CONTROL_PLANE_CPU_REQUEST="500m"
CONTROL_PLANE_MEMORY_REQUEST="2Gi"
CONTROL_PLANE_CPU_LIMIT="2000m"
CONTROL_PLANE_MEMORY_LIMIT="4Gi"

# Sidecar proxy resource limits
SIDECAR_CPU_REQUEST="100m"
SIDECAR_MEMORY_REQUEST="128Mi"
SIDECAR_CPU_LIMIT="2000m"
SIDECAR_MEMORY_LIMIT="1Gi"

# Gateway resource limits
GATEWAY_CPU_REQUEST="100m"
GATEWAY_MEMORY_REQUEST="128Mi"
GATEWAY_CPU_LIMIT="2000m"
GATEWAY_MEMORY_LIMIT="1Gi"

# =============================================================================
# HIGH AVAILABILITY CONFIGURATION
# =============================================================================

# Control plane replicas
CONTROL_PLANE_REPLICAS=2

# Gateway replicas
INGRESS_GATEWAY_MIN_REPLICAS=2
INGRESS_GATEWAY_MAX_REPLICAS=10
EGRESS_GATEWAY_MIN_REPLICAS=1
EGRESS_GATEWAY_MAX_REPLICAS=5

# Auto-scaling thresholds
CPU_UTILIZATION_THRESHOLD=80
MEMORY_UTILIZATION_THRESHOLD=80

# =============================================================================
# EXTERNAL SERVICES
# =============================================================================

# External services that require egress access
EXTERNAL_HTTPS_HOSTS=(
    "*.googleapis.com"
    "*.amazonaws.com"
    "*.azure.com"
    "auth0.com"
    "*.auth0.com"
)

# Skip proxy for these outbound ports
SKIP_OUTBOUND_PORTS="443,53"  # HTTPS and DNS

# Skip proxy for these inbound ports
SKIP_INBOUND_PORTS="9000"  # Metrics port

# =============================================================================
# DEVELOPMENT/TESTING OVERRIDES
# =============================================================================

# Set to true for development/testing environments
DEV_MODE=false

# In dev mode, use more permissive settings
if [[ "$DEV_MODE" == "true" ]]; then
    MTLS_MODE="PERMISSIVE"
    JAEGER_SAMPLING_RATE="0.1"  # 10% sampling for dev
    ENABLE_NETWORK_POLICIES=false
    CIRCUIT_BREAKER_ERRORS=5
    RETRY_ATTEMPTS=1
fi

# =============================================================================
# VALIDATION
# =============================================================================

# Validate required variables
validate_config() {
    local errors=0

    if [[ -z "$CLUSTER_NAME" ]]; then
        echo "ERROR: CLUSTER_NAME is required"
        errors=$((errors + 1))
    fi

    if [[ "$MESH_TYPE" != "istio" && "$MESH_TYPE" != "linkerd" ]]; then
        echo "ERROR: MESH_TYPE must be 'istio' or 'linkerd'"
        errors=$((errors + 1))
    fi

    if [[ "$ENABLE_MULTICLUSTER" == "true" ]]; then
        if [[ -z "$REMOTE_CLUSTER_ENDPOINT" ]]; then
            echo "WARNING: REMOTE_CLUSTER_ENDPOINT not set, multi-cluster features will not work"
        fi
        if [[ -z "$REMOTE_CLUSTER_KUBECONFIG_BASE64" ]]; then
            echo "WARNING: REMOTE_CLUSTER_KUBECONFIG_BASE64 not set, multi-cluster features will not work"
        fi
    fi

    if [[ $errors -gt 0 ]]; then
        echo "ERROR: Configuration validation failed with $errors errors"
        return 1
    fi

    echo "Configuration validation passed"
    return 0
}

# Export all variables for use by deployment scripts
set -a  # Mark all variables for export
