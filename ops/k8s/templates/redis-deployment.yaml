{{- if eq .Values.infrastructure.cache.backend "redis" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: {{ .Values.namespace | default "microservices" }}
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: cache
    marty.framework/infrastructure: "cache"
spec:
  replicas: {{ .Values.infrastructure.cache.redis.replicas | default 1 }}
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: cache
    spec:
      containers:
      - name: redis
        image: {{ .Values.infrastructure.cache.redis.image | default "redis:7.2-alpine" }}
        imagePullPolicy: IfNotPresent
        ports:
        - name: redis
          containerPort: 6379
          protocol: TCP
        env:
        {{- if .Values.secrets.redis.password }}
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.service.name }}-enterprise-secrets
              key: redis_password
        {{- end }}
        command:
        - redis-server
        {{- if .Values.secrets.redis.password }}
        - --requirepass $(REDIS_PASSWORD)
        {{- end }}
        - --maxmemory {{ .Values.infrastructure.cache.redis.maxMemory | default "256mb" }}
        - --maxmemory-policy {{ .Values.infrastructure.cache.redis.evictionPolicy | default "allkeys-lru" }}
        - --save {{ .Values.infrastructure.cache.redis.persistence.save | default "900 1 300 10 60 10000" }}
        - --appendonly {{ .Values.infrastructure.cache.redis.persistence.aof | default "yes" }}
        livenessProbe:
          tcpSocket:
            port: redis
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          limits:
            cpu: {{ .Values.infrastructure.cache.redis.resources.limits.cpu | default "500m" }}
            memory: {{ .Values.infrastructure.cache.redis.resources.limits.memory | default "512Mi" }}
          requests:
            cpu: {{ .Values.infrastructure.cache.redis.resources.requests.cpu | default "100m" }}
            memory: {{ .Values.infrastructure.cache.redis.resources.requests.memory | default "128Mi" }}
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /usr/local/etc/redis/redis.conf
          subPath: redis.conf
      volumes:
      - name: redis-data
        {{- if .Values.infrastructure.cache.redis.persistence.enabled }}
        persistentVolumeClaim:
          claimName: redis-data
        {{- else }}
        emptyDir: {}
        {{- end }}
      - name: redis-config
        configMap:
          name: redis-config
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: {{ .Values.namespace | default "microservices" }}
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: cache
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: redis
    protocol: TCP
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: {{ .Release.Name }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: {{ .Values.namespace | default "microservices" }}
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: cache-config
data:
  redis.conf: |
    # Redis configuration for Phase 2 caching
    bind 0.0.0.0
    protected-mode yes
    port 6379

    # Memory management
    maxmemory {{ .Values.infrastructure.cache.redis.maxMemory | default "256mb" }}
    maxmemory-policy {{ .Values.infrastructure.cache.redis.evictionPolicy | default "allkeys-lru" }}

    # Persistence
    save {{ .Values.infrastructure.cache.redis.persistence.save | default "900 1 300 10 60 10000" }}
    appendonly {{ .Values.infrastructure.cache.redis.persistence.aof | default "yes" }}
    appendfsync everysec

    # Performance
    tcp-keepalive 300
    timeout 0
    tcp-backlog 511

    # Logging
    loglevel {{ .Values.infrastructure.cache.redis.logLevel | default "notice" }}

    # Security
    {{- if .Values.secrets.redis.password }}
    # Password will be set via command line
    {{- end }}
---
{{- if .Values.infrastructure.cache.redis.persistence.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data
  namespace: {{ .Values.namespace | default "microservices" }}
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: cache-storage
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.infrastructure.cache.redis.persistence.size | default "5Gi" }}
  {{- if .Values.infrastructure.cache.redis.persistence.storageClass }}
  storageClassName: {{ .Values.infrastructure.cache.redis.persistence.storageClass }}
  {{- end }}
{{- end }}
{{- end }}
