# RBAC (Role-Based Access Control) Policies for Microservices Framework

# User Roles Definition
roles:
  # System Administrator - Full access to all resources
  admin:
    description: "System administrator with full access"
    permissions:
      - "*:*:*"  # Full access to all resources and actions
    inherits: []

  # Service Manager - Can manage services and configurations
  service_manager:
    description: "Service manager with deployment and configuration access"
    permissions:
      - "services:*:read"
      - "services:*:create"
      - "services:*:update"
      - "services:*:delete"
      - "configs:*:read"
      - "configs:*:update"
      - "deployments:*:read"
      - "deployments:*:create"
      - "deployments:*:update"
      - "monitoring:*:read"
    inherits: ["developer"]

  # Developer - Can read services and create/update code
  developer:
    description: "Developer with read access to services and limited write access"
    permissions:
      - "services:*:read"
      - "configs:*:read"
      - "deployments:*:read"
      - "logs:*:read"
      - "metrics:*:read"
      - "code:*:read"
      - "code:*:create"
      - "code:*:update"
    inherits: ["viewer"]

  # Viewer - Read-only access to most resources
  viewer:
    description: "Read-only access to non-sensitive resources"
    permissions:
      - "services:*:read"
      - "configs:public:read"
      - "deployments:*:read"
      - "logs:application:read"
      - "metrics:*:read"
      - "documentation:*:read"
    inherits: []

  # Service Account - Limited access for automated systems
  service_account:
    description: "Service account for automated systems and CI/CD"
    permissions:
      - "services:own:read"
      - "services:own:update"
      - "configs:own:read"
      - "deployments:own:create"
      - "deployments:own:read"
      - "metrics:own:read"
      - "logs:own:read"
    inherits: []

  # Auditor - Read-only access for security and compliance
  auditor:
    description: "Security auditor with read access to security logs and configurations"
    permissions:
      - "audit:*:read"
      - "security:*:read"
      - "compliance:*:read"
      - "logs:security:read"
      - "logs:audit:read"
      - "configs:security:read"
    inherits: []

  # Monitor - Access to monitoring and alerting systems
  monitor:
    description: "Monitoring system with access to metrics and alerting"
    permissions:
      - "metrics:*:read"
      - "monitoring:*:read"
      - "monitoring:*:update"
      - "alerts:*:read"
      - "alerts:*:create"
      - "alerts:*:update"
      - "dashboards:*:read"
      - "dashboards:*:create"
      - "dashboards:*:update"
    inherits: []

# Resource Definitions
resources:
  # Service-related resources
  services:
    description: "Microservices and their configurations"
    actions: ["create", "read", "update", "delete", "deploy", "scale"]
    attributes:
      - "service_name"
      - "environment"
      - "team"
      - "classification"

  # Configuration resources
  configs:
    description: "Service configurations and environment variables"
    actions: ["create", "read", "update", "delete"]
    attributes:
      - "environment"
      - "service_name"
      - "classification"  # public, internal, confidential, secret

  # Deployment resources
  deployments:
    description: "Service deployments and releases"
    actions: ["create", "read", "update", "delete", "rollback"]
    attributes:
      - "environment"
      - "service_name"
      - "team"

  # Monitoring and observability
  metrics:
    description: "Service metrics and performance data"
    actions: ["read", "query"]
    attributes:
      - "service_name"
      - "environment"
      - "metric_type"

  logs:
    description: "Application and system logs"
    actions: ["read", "query"]
    attributes:
      - "log_level"
      - "service_name"
      - "environment"
      - "log_type"  # application, security, audit, system

  monitoring:
    description: "Monitoring configurations and dashboards"
    actions: ["create", "read", "update", "delete"]
    attributes:
      - "environment"
      - "service_name"

  # Security and audit resources
  security:
    description: "Security policies and configurations"
    actions: ["read", "update"]
    attributes:
      - "policy_type"
      - "environment"

  audit:
    description: "Audit logs and compliance data"
    actions: ["read"]
    attributes:
      - "event_type"
      - "environment"

  compliance:
    description: "Compliance reports and assessments"
    actions: ["read", "create"]
    attributes:
      - "report_type"
      - "environment"

# Environment-based Policies
environments:
  production:
    description: "Production environment with strict access controls"
    required_roles: ["admin", "service_manager"]
    restricted_actions: ["delete", "update"]
    approval_required: true
    audit_level: "full"

  staging:
    description: "Staging environment for testing and validation"
    required_roles: ["admin", "service_manager", "developer"]
    restricted_actions: ["delete"]
    approval_required: false
    audit_level: "standard"

  development:
    description: "Development environment with relaxed controls"
    required_roles: ["admin", "service_manager", "developer"]
    restricted_actions: []
    approval_required: false
    audit_level: "basic"

# Policy Rules
policies:
  # Admin access policy
  - name: "admin_full_access"
    description: "Administrators have full access to all resources"
    effect: "allow"
    subjects:
      roles: ["admin"]
    resources:
      - "*"
    actions:
      - "*"
    conditions: []

  # Production protection policy
  - name: "production_protection"
    description: "Restrict production access to authorized roles only"
    effect: "deny"
    subjects:
      roles: ["developer", "viewer"]
    resources:
      - "services"
      - "configs"
      - "deployments"
    actions:
      - "create"
      - "update"
      - "delete"
    conditions:
      - "environment == 'production'"

  # Service ownership policy
  - name: "service_ownership"
    description: "Users can only modify services they own or have team access to"
    effect: "allow"
    subjects:
      roles: ["developer", "service_manager"]
    resources:
      - "services"
      - "configs"
      - "deployments"
    actions:
      - "read"
      - "update"
    conditions:
      - "resource.team == user.team OR resource.owner == user.id"

  # Sensitive configuration protection
  - name: "sensitive_config_protection"
    description: "Only authorized roles can access sensitive configurations"
    effect: "deny"
    subjects:
      roles: ["viewer", "developer"]
    resources:
      - "configs"
    actions:
      - "read"
    conditions:
      - "resource.classification IN ['confidential', 'secret']"

  # Audit log protection
  - name: "audit_log_protection"
    description: "Only auditors and admins can access audit logs"
    effect: "allow"
    subjects:
      roles: ["admin", "auditor"]
    resources:
      - "audit"
      - "logs"
    actions:
      - "read"
    conditions:
      - "resource.log_type == 'audit'"

  # Security log access
  - name: "security_log_access"
    description: "Security logs require special access"
    effect: "allow"
    subjects:
      roles: ["admin", "auditor", "security_manager"]
    resources:
      - "logs"
    actions:
      - "read"
    conditions:
      - "resource.log_type == 'security'"

  # Service account restrictions
  - name: "service_account_restrictions"
    description: "Service accounts can only access their own resources"
    effect: "allow"
    subjects:
      roles: ["service_account"]
    resources:
      - "services"
      - "configs"
      - "deployments"
      - "metrics"
      - "logs"
    actions:
      - "read"
      - "update"
    conditions:
      - "resource.service_name == user.service_name"

  # Monitoring access policy
  - name: "monitoring_access"
    description: "Monitor role can access monitoring systems"
    effect: "allow"
    subjects:
      roles: ["monitor", "admin"]
    resources:
      - "metrics"
      - "monitoring"
      - "alerts"
      - "dashboards"
    actions:
      - "read"
      - "create"
      - "update"
    conditions: []

# Default Policies
default_policies:
  # Default deny policy
  - name: "default_deny"
    description: "Default policy to deny access if no other policy matches"
    effect: "deny"
    subjects:
      roles: ["*"]
    resources:
      - "*"
    actions:
      - "*"
    conditions: []
    priority: 1000  # Lowest priority

  # Health check access
  - name: "health_check_access"
    description: "Allow health check access to all authenticated users"
    effect: "allow"
    subjects:
      roles: ["*"]
    resources:
      - "health"
    actions:
      - "read"
    conditions: []
    priority: 1

  # Documentation access
  - name: "documentation_access"
    description: "Allow documentation access to all authenticated users"
    effect: "allow"
    subjects:
      roles: ["*"]
    resources:
      - "documentation"
    actions:
      - "read"
    conditions: []
    priority: 1

# Attribute Mappings
attribute_mappings:
  user_attributes:
    - "id"
    - "email"
    - "team"
    - "department"
    - "service_name"  # For service accounts
    - "roles"

  resource_attributes:
    - "service_name"
    - "environment"
    - "team"
    - "owner"
    - "classification"
    - "log_type"
    - "metric_type"
    - "policy_type"
    - "report_type"
    - "event_type"

  action_attributes:
    - "method"  # HTTP method
    - "endpoint"  # API endpoint
    - "time"  # Request time
    - "ip_address"  # Client IP

# Configuration Settings
settings:
  # Policy evaluation settings
  policy_evaluation:
    default_effect: "deny"
    break_on_first_match: false
    log_policy_decisions: true
    cache_policy_decisions: true
    cache_ttl_seconds: 300

  # Audit settings
  audit:
    log_all_access_attempts: true
    log_policy_violations: true
    log_successful_access: false  # Only log violations by default
    audit_log_retention_days: 90

  # Performance settings
  performance:
    enable_policy_caching: true
    policy_cache_size: 1000
    enable_role_caching: true
    role_cache_ttl_seconds: 600
