apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: observability
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true
    [grafana_net]
    url = https://grafana.net
    [log]
    mode = console
    [paths]
    data = /var/lib/grafana/data
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    [security]
    admin_user = admin
    admin_password = admin
    allow_embedding = true
    [server]
    domain = localhost
    http_port = 3000
    protocol = http
    root_url = http://localhost:3000/
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: observability
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      orgId: 1
      url: http://prometheus:9090
      isDefault: true
      editable: true
      jsonData:
        httpMethod: POST
        manageAlerts: true
        prometheusType: Prometheus
        prometheusVersion: 2.47.0
        cacheLevel: 'High'
        disableRecordingRules: false
        incrementalQueryOverlapWindow: 10m
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-config
  namespace: observability
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
    - name: 'istio-dashboards'
      orgId: 1
      folder: 'Service Mesh'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards/istio
    - name: 'linkerd-dashboards'
      orgId: 1
      folder: 'Service Mesh'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards/linkerd
    - name: 'microservices-dashboards'
      orgId: 1
      folder: 'Microservices'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards/microservices
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: observability
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.1.0
        ports:
        - containerPort: 3000
        resources:
          requests:
            memory: 256Mi
            cpu: 100m
          limits:
            memory: 512Mi
            cpu: 200m
        env:
        - name: GF_SECURITY_ADMIN_USER
          value: "admin"
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin"
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        volumeMounts:
        - name: grafana-config
          mountPath: /etc/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards-config
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: istio-dashboards
          mountPath: /var/lib/grafana/dashboards/istio
        - name: linkerd-dashboards
          mountPath: /var/lib/grafana/dashboards/linkerd
      volumes:
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards-config
        configMap:
          name: grafana-dashboards-config
      - name: grafana-storage
        emptyDir: {}
      - name: istio-dashboards
        configMap:
          name: istio-dashboards
      - name: linkerd-dashboards
        configMap:
          name: linkerd-dashboards
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: observability
spec:
  selector:
    app: grafana
  ports:
    - port: 3000
      targetPort: 3000
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: istio-dashboards
  namespace: observability
data:
  istio-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Istio Service Mesh Overview",
        "tags": ["istio", "service-mesh", "microservices"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Request Rate",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(rate(istio_requests_total[5m]))",
                "refId": "A"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "yellow",
                      "value": 100
                    },
                    {
                      "color": "red",
                      "value": 1000
                    }
                  ]
                },
                "unit": "reqps"
              }
            },
            "gridPos": {
              "h": 8,
              "w": 6,
              "x": 0,
              "y": 0
            }
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: linkerd-dashboards
  namespace: observability
data:
  linkerd-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Linkerd Service Mesh Overview",
        "tags": ["linkerd", "service-mesh", "microservices"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Request Rate",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(rate(response_total[5m]))",
                "refId": "A"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "yellow",
                      "value": 100
                    },
                    {
                      "color": "red",
                      "value": 1000
                    }
                  ]
                },
                "unit": "reqps"
              }
            },
            "gridPos": {
              "h": 8,
              "w": 6,
              "x": 0,
              "y": 0
            }
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }
