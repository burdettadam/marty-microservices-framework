"""
{{service_name}} Authentication Service - Main Entry Point
"""

import asyncio
import logging
from typing import Optional

from marty_common.grpc_service_factory import serve_auto_service
from marty_common.base_service import BaseService

from src.{{service_package}}.app.core.config import {{service_class}}ServiceConfig
from src.{{service_package}}.app.core.auth_manager import get_auth_manager
from src.{{service_package}}.app.core.token_manager import get_token_manager
from src.{{service_package}}.app.core.user_manager import get_user_manager
from src.{{service_package}}.app.repositories import get_user_repository, get_session_repository
from src.{{service_package}}.app.service import {{service_class}}Service

logger = logging.getLogger(__name__)


async def initialize_auth_service() -> None:
    """Initialize the authentication service components."""
    logger.info("Initializing {{service_name}} Authentication Service...")

    try:
        # Initialize authentication manager
        auth_manager = get_auth_manager()
        await auth_manager.initialize()

        # Initialize token manager
        token_manager = get_token_manager()
        await token_manager.initialize()

        # Initialize user manager
        user_manager = get_user_manager()
        await user_manager.initialize()

        # Initialize repositories
        user_repo = get_user_repository()
        session_repo = get_session_repository()

        logger.info("Authentication service components initialized successfully")

    except Exception as e:
        logger.error(f"Failed to initialize authentication service: {e}")
        raise


async def main():
    """Main entry point for the {{service_name}} authentication service."""
    try:
        # Load configuration
        config = {{service_class}}ServiceConfig()

        # Initialize service components
        await initialize_auth_service()

        # Create and configure the service
        service_instance = {{service_class}}Service()

        # Start the gRPC server
        logger.info(f"Starting {{service_name}} Authentication Service on port {config.port}")

        await serve_auto_service(
            service_class={{service_class}}Service,
            service_instance=service_instance,
            config=config
        )

    except KeyboardInterrupt:
        logger.info("Service interrupted by user")
    except Exception as e:
        logger.error(f"Service failed with error: {e}")
        raise
    finally:
        logger.info("{{service_name}} Authentication Service shutdown complete")


if __name__ == "__main__":
    # Configure logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

    # Run the service
    asyncio.run(main())
