syntax = "proto3";

package {{service_package}};

import "google/protobuf/timestamp.proto";

// {{service_description}}
service {{service_class}}Service {
  // Create a new entity
  rpc CreateEntity(CreateEntityRequest) returns (CreateEntityResponse);

  // Get entity by ID
  rpc GetEntity(GetEntityRequest) returns (GetEntityResponse);

  // Update an existing entity
  rpc UpdateEntity(UpdateEntityRequest) returns (UpdateEntityResponse);

  // Delete an entity (soft delete by default)
  rpc DeleteEntity(DeleteEntityRequest) returns (DeleteEntityResponse);

  // List entities with pagination
  rpc ListEntities(ListEntitiesRequest) returns (ListEntitiesResponse);

  // Search entities by query
  rpc SearchEntities(SearchEntitiesRequest) returns (SearchEntitiesResponse);

  // Health check
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

// Entity attribute
message EntityAttribute {
  string name = 1;
  string value = 2;
  string type = 3; // string, number, boolean, json, etc.
}

// Entity definition
message Entity {
  string id = 1;
  string name = 2;
  string description = 3;
  string external_id = 4;
  string status = 5;
  string metadata = 6; // JSON string
  repeated EntityAttribute attributes = 7;
  string created_at = 8; // ISO datetime string
  string updated_at = 9; // ISO datetime string
}

// Status message for responses
message Status {
  int32 code = 1;
  string message = 2;
  repeated string details = 3;
}

// Create entity request
message CreateEntityRequest {
  string name = 1;
  string description = 2;
  string external_id = 3;
  string status = 4; // Optional, defaults to "active"
  string metadata = 5; // JSON string
  repeated EntityAttribute attributes = 6;
}

// Create entity response
message CreateEntityResponse {
  string entity_id = 1;
  Status status = 2;
}

// Get entity request
message GetEntityRequest {
  string entity_id = 1;
}

// Get entity response
message GetEntityResponse {
  Entity entity = 1;
  Status status = 2;
}

// Update entity request
message UpdateEntityRequest {
  string entity_id = 1;
  optional string name = 2;
  optional string description = 3;
  optional string status = 4;
  optional string metadata = 5; // JSON string
}

// Update entity response
message UpdateEntityResponse {
  Status status = 1;
}

// Delete entity request
message DeleteEntityRequest {
  string entity_id = 1;
  bool hard_delete = 2; // false for soft delete, true for hard delete
}

// Delete entity response
message DeleteEntityResponse {
  Status status = 1;
}

// List entities request
message ListEntitiesRequest {
  int32 skip = 1; // Number of entities to skip
  int32 limit = 2; // Maximum number of entities to return
}

// List entities response
message ListEntitiesResponse {
  repeated Entity entities = 1;
  int32 total_count = 2;
  Status status = 3;
}

// Search entities request
message SearchEntitiesRequest {
  string query = 1; // Search query
  int32 limit = 2; // Maximum number of entities to return
}

// Search entities response
message SearchEntitiesResponse {
  repeated Entity entities = 1;
  Status status = 2;
}

// Health check request
message HealthCheckRequest {
  // Empty for now
}

// Health check response
message HealthCheckResponse {
  string status = 1; // SERVING, NOT_SERVING
  string database_status = 2; // HEALTHY, UNHEALTHY, ERROR
  string connection_info = 3; // Connection details
}
