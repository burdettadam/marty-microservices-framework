"""
Database models for {{service_name}}.
"""

from sqlalchemy import Column, Integer, String, DateTime, Boolean, Text, ForeignKey, Index
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship, Session
from sqlalchemy.sql import func
from datetime import datetime
from typing import Optional
import uuid

Base = declarative_base()


class BaseModel(Base):
    """Base model with common fields."""
    __abstract__ = True

    id = Column(Integer, primary_key=True, index=True)
    created_at = Column(DateTime(timezone=True), server_default=func.now(), nullable=False)
    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now(), nullable=False)
    is_active = Column(Boolean, default=True, nullable=False)


class {{service_class}}Entity(BaseModel):
    """Main entity for {{service_name}}."""
    __tablename__ = "{{service_package}}_entities"

    # Core fields
    name = Column(String(255), nullable=False, index=True)
    description = Column(Text)
    external_id = Column(String(255), unique=True, index=True)

    # Status and metadata
    status = Column(String(50), default="active", nullable=False, index=True)
    metadata_ = Column(Text)  # JSON field for flexible metadata

    # Relationships
    attributes = relationship("{{service_class}}Attribute", back_populates="entity", cascade="all, delete-orphan")

    # Indexes
    __table_args__ = (
        Index('ix_{{service_package}}_entity_name_status', 'name', 'status'),
        Index('ix_{{service_package}}_entity_created_at', 'created_at'),
    )

    def __repr__(self):
        return f"<{{service_class}}Entity(id={self.id}, name='{self.name}', status='{self.status}')>"


class {{service_class}}Attribute(BaseModel):
    """Attributes associated with {{service_name}} entities."""
    __tablename__ = "{{service_package}}_attributes"

    # Core fields
    entity_id = Column(Integer, ForeignKey("{{service_package}}_entities.id"), nullable=False)
    attribute_name = Column(String(255), nullable=False, index=True)
    attribute_value = Column(Text)
    attribute_type = Column(String(50), default="string", nullable=False)

    # Relationships
    entity = relationship("{{service_class}}Entity", back_populates="attributes")

    # Indexes
    __table_args__ = (
        Index('ix_{{service_package}}_attr_entity_name', 'entity_id', 'attribute_name'),
        Index('ix_{{service_package}}_attr_type', 'attribute_type'),
    )

    def __repr__(self):
        return f"<{{service_class}}Attribute(entity_id={self.entity_id}, name='{self.attribute_name}', value='{self.attribute_value}')>"


class {{service_class}}AuditLog(BaseModel):
    """Audit log for tracking changes."""
    __tablename__ = "{{service_package}}_audit_logs"

    # Core fields
    entity_id = Column(Integer, nullable=False, index=True)
    entity_type = Column(String(100), nullable=False, index=True)
    action = Column(String(50), nullable=False, index=True)  # CREATE, UPDATE, DELETE

    # Change details
    old_values = Column(Text)  # JSON of old values
    new_values = Column(Text)  # JSON of new values
    changed_fields = Column(Text)  # JSON array of changed field names

    # Context
    user_id = Column(String(255), index=True)
    session_id = Column(String(255), index=True)
    ip_address = Column(String(45))  # IPv6 compatible
    user_agent = Column(Text)

    # Indexes
    __table_args__ = (
        Index('ix_{{service_package}}_audit_entity_action', 'entity_id', 'entity_type', 'action'),
        Index('ix_{{service_package}}_audit_created_at', 'created_at'),
        Index('ix_{{service_package}}_audit_user', 'user_id', 'created_at'),
    )

    def __repr__(self):
        return f"<{{service_class}}AuditLog(entity_id={self.entity_id}, action='{self.action}', created_at='{self.created_at}')>"
