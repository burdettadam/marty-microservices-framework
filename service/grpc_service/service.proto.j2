# {{service_class}} Service Protocol Definition

syntax = "proto3";

package {{service_package}};

// {{service_class}} service definition
service {{service_class}} {
  // Get service status and health information
  rpc GetStatus(StatusRequest) returns (StatusResponse);

  // Add your service methods here
  // Example:
  // rpc ProcessDocument(ProcessRequest) returns (ProcessResponse);
  // rpc GetProcessingHistory(HistoryRequest) returns (HistoryResponse);
}

// Request message for getting service status
message StatusRequest {
  // Optional: include detailed status
  bool include_details = 1;
}

// Response message for service status
message StatusResponse {
  // Service health status
  bool is_healthy = 1;

  // Service name
  string service_name = 2;

  // Service version
  string version = 3;

  // Optional detailed status information
  string details = 4;

  // Timestamp of status check
  string timestamp = 5;
}

// Add your custom message types here
// Example:
// message ProcessRequest {
//   string document_id = 1;
//   bytes document_data = 2;
//   ProcessingOptions options = 3;
// }
//
// message ProcessResponse {
//   bool success = 1;
//   string result = 2;
//   string error = 3;
//   ProcessingMetadata metadata = 4;
// }
//
// message ProcessingOptions {
//   bool validate_schema = 1;
//   bool extract_metadata = 2;
//   int32 timeout_seconds = 3;
// }
//
// message ProcessingMetadata {
//   string processing_time = 1;
//   int64 document_size = 2;
//   repeated string warnings = 3;
// }
