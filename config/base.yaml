# Base configuration for microservices framework
# This file contains common configuration patterns shared across all environments
# Compatible with unified configuration management system

# Service metadata for unified configuration
service:
  name: "microservice" # Override in service-specific configs
  version: "1.0.0"      # Override with actual version
  description: "Marty Microservice" # Override with service description
  environment: "development" # Will be detected automatically

# Unified configuration management settings
unified_config:
  enable_secrets: true
  secret_backends: ["environment", "file"] # Add vault, aws, gcp, azure as needed
  cache_ttl_minutes: 15
  enable_hot_reload: false
  strategy: "hierarchical"

# Default ports for service types
default_ports: &default_ports
  grpc_service: 50051
  fastapi_service: 8000
  hybrid_service: 8080
  auth_service: 8001
  api_gateway: 8000
  health_check: 8080
  metrics: 9090

# Common database configuration patterns
common_database: &common_database
  host: "${SECRET:database_host}"
  port: 5432
  database: "${SECRET:database_name}"
  username: "${SECRET:database_username}"
  password: "${SECRET:database_password}"
  pool_size: 10
  max_overflow: 20
  pool_timeout: 30
  pool_recycle: 3600
  ssl_mode: prefer
  connection_timeout: 30
  # Connection URL template (will be constructed automatically)
  url_template: "postgresql://{username}:{password}@{host}:{port}/{database}"

# Common security configuration (ENFORCED BY DEFAULT)
common_security: &common_security
  grpc_tls:
    enabled: true
    mtls: true
    require_client_auth: true
    verify_hostname: true
    server_cert: "/etc/tls/server/tls.crt"
    server_key: "/etc/tls/server/tls.key"
    client_ca: "/etc/tls/ca/ca.crt"
    client_cert: "/etc/tls/client/tls.crt"
    client_key: "/etc/tls/client/tls.key"

  auth:
    required: true
    jwt:
      enabled: true
      algorithm: "HS256"
      secret: "${SECRET:jwt_secret}"  # Secret reference for unified system
    api_key_enabled: true
    api_key_header: "X-API-Key"
    api_keys:
      - name: "service_api_key"
        key: "${SECRET:service_api_key}"
    client_cert:
      enabled: true
      extract_subject: true

  authz:
    enabled: true
    policy_config: "/etc/config/policy.yaml"
    default_action: "deny"

# Common logging configuration
common_logging: &common_logging
  level: INFO
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  handlers:
    - console
    - file
  max_bytes: 10485760  # 10MB
  backup_count: 5

# Common monitoring configuration
common_monitoring: &common_monitoring
  enabled: true
  metrics_port: 9090
  health_check_port: 8080
  prometheus_enabled: true
  tracing_enabled: true
  jaeger_endpoint: "${SECRET:jaeger_endpoint}" # Optional: external tracing
  service_type: "grpc" # Override per service: grpc, fastapi, hybrid

# gRPC server configuration for unified gRPC server
grpc: &common_grpc
  port: 50051
  max_workers: 10
  reflection_enabled: true
  health_service_enabled: true
  keepalive_time_ms: 30000
  keepalive_timeout_ms: 5000
  keepalive_permit_without_calls: true

# Common resilience patterns
common_resilience: &common_resilience
  circuit_breaker:
    failure_threshold: 5
    recovery_timeout: 60
    half_open_max_calls: 3

  retry_policy:
    max_attempts: 3
    backoff_multiplier: 1.5
    max_delay_seconds: 30

  # Timeout configurations for different dependency types
  timeouts:
    default_timeout: 30.0
    database_timeout: 10.0
    api_call_timeout: 15.0
    message_queue_timeout: 5.0
    cache_timeout: 2.0
    file_operation_timeout: 30.0
    circuit_breaker_timeout: 60.0

  # Bulkhead configurations for resource isolation
  bulkheads:
    # Database operations
    database:
      max_concurrent: 10
      timeout_seconds: 15.0
      bulkhead_type: "semaphore"
      reject_on_full: false
      enable_circuit_breaker: true

    # External API calls
    external_api:
      max_concurrent: 15
      timeout_seconds: 20.0
      bulkhead_type: "semaphore"
      reject_on_full: true
      enable_circuit_breaker: true
      circuit_breaker_failure_threshold: 3

    # Cache operations
    cache:
      max_concurrent: 50
      timeout_seconds: 2.0
      bulkhead_type: "semaphore"
      reject_on_full: true
      enable_circuit_breaker: false

    # Message queue operations
    message_queue:
      max_concurrent: 20
      timeout_seconds: 10.0
      bulkhead_type: "semaphore"
      reject_on_full: false
      enable_circuit_breaker: true
      circuit_breaker_failure_threshold: 5

    # File system operations
    file_system:
      max_concurrent: 8
      timeout_seconds: 30.0
      bulkhead_type: "thread_pool"
      reject_on_full: true
      enable_circuit_breaker: false

    # CPU-intensive operations
    cpu_intensive:
      max_concurrent: 4
      timeout_seconds: 60.0
      bulkhead_type: "thread_pool"
      reject_on_full: true
      enable_circuit_breaker: false

# Service ports
ports: *default_ports

# Default configurations
security: *common_security
logging: *common_logging
monitoring: *common_monitoring
resilience: *common_resilience

# Database configuration template patterns
database_templates:
  # Standard database configuration template
  standard: &standard_database
    <<: *common_database
    host: "${DB_HOST:-localhost}"
    port: "${DB_PORT:-5432}"
    database: "${SERVICE_NAME}_db"
    username: "${DB_USERNAME:-service_user}"
    password: "${DB_PASSWORD:-}"

  # Read-only replica configuration template
  readonly: &readonly_database
    <<: *common_database
    host: "${DB_READONLY_HOST:-localhost}"
    port: "${DB_READONLY_PORT:-5432}"
    database: "${SERVICE_NAME}_db"
    username: "${DB_READONLY_USERNAME:-readonly_user}"
    password: "${DB_READONLY_PASSWORD:-}"

  # Test database configuration template
  test: &test_database
    <<: *common_database
    host: "${TEST_DB_HOST:-localhost}"
    port: "${TEST_DB_PORT:-5432}"
    database: "${SERVICE_NAME}_test"
    username: "${TEST_DB_USERNAME:-test_user}"
    password: "${TEST_DB_PASSWORD:-}"

# Service configuration templates
service_templates:
  # gRPC service template
  grpc_service:
    max_connections: 100
    request_timeout: 30
    reflection_enabled: true
    health_check_enabled: true

  # FastAPI service template
  fastapi_service:
    max_connections: 100
    request_timeout: 30
    cors_enabled: true
    swagger_enabled: true

  # Hybrid service template
  hybrid_service:
    max_connections: 100
    request_timeout: 30
    grpc_port: 50051
    http_port: 8000

# Secrets configuration for unified secrets management
# These define the secrets that services expect to be available
secrets:
  # Database secrets
  database_host: "localhost" # Default for development
  database_username: "postgres"
  database_password: "postgres"
  database_name: "microservice_db"

  # Authentication secrets
  jwt_secret: "development_jwt_secret_change_in_production"
  service_api_key: "development_api_key_change_in_production"

  # External service secrets (empty defaults - set per environment)
  jaeger_endpoint: ""
  vault_token: ""
  external_api_key: ""

  # TLS certificates (paths - actual certificates should be in secret backends)
  tls_server_cert_path: "/etc/tls/server/tls.crt"
  tls_server_key_path: "/etc/tls/server/tls.key"
  tls_client_cert_path: "/etc/tls/client/tls.crt"
  tls_client_key_path: "/etc/tls/client/tls.key"
  tls_ca_cert_path: "/etc/tls/ca/ca.crt"

# Environment-specific configuration overrides will be applied on top of this base

# Additional service configuration
additional_services:
  batch_processing:
    batch_size: 100
    rate_limit_per_minute: 60

# Plugin system configuration
plugins:
  enabled: true
  auto_discovery: true
  discovery_paths:
    - "./plugins"
    - "/opt/mmf/plugins"
  config_dir: "./config/plugins"

  # Isolation level for plugin execution
  isolation_level: "process"  # Options: process, thread, none

  # Plugin loading configuration
  loading:
    parallel: true
    timeout_seconds: 30
    retry_attempts: 3

  # Default plugins to load (can be overridden per environment)
  default_plugins:
    - name: "production_payment"
      enabled: true
      priority: 100

  # Plugin security settings
  security:
    require_signature: false  # Set to true in production
    allowed_sources:
      - "local"
      - "official"
    sandboxing:
      enabled: false  # Enable in production
      resource_limits:
        memory_mb: 512
        cpu_percent: 50
