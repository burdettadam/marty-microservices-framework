apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  labels:
    app.kubernetes.io/name: order-service
    app.kubernetes.io/component: api
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: order-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: order-service
        app.kubernetes.io/component: api
        version: v1  # For service mesh traffic splitting
      annotations:
        # Prometheus scraping
        prometheus.io/scrape: "true"
        prometheus.io/port: "9000"
        prometheus.io/path: "/metrics"
        # Istio sidecar injection (optional, namespace-level injection is preferred)
        sidecar.istio.io/inject: "true"
        # Linkerd injection (optional, namespace-level injection is preferred)
        linkerd.io/inject: enabled
        # Service mesh configuration
        config.linkerd.io/skip-inbound-ports: "9000"  # Skip metrics port
        traffic.sidecar.istio.io/includeInboundPorts: "50051,8080"  # Include only app ports
    spec:
      serviceAccountName: order-service
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: order-service
          image: order-service:latest
          imagePullPolicy: Never
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL
          ports:
            - name: grpc
              containerPort: 50051
            - name: metrics
              containerPort: 9000
            - name: health
              containerPort: 8080
          env:
            - name: APP_ENVIRONMENT
              valueFrom:
                configMapKeyRef:
                  name: order-service-config
                  key: environment
            - name: APP_GRPC_PORT
              value: "50051"
            - name: APP_METRICS_PORT
              value: "9000"
            - name: APP_HEALTH_PORT
              value: "8080"
            - name: APP_TRACING_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: order-service-config
                  key: otlp_endpoint
                  optional: true
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: var-run
              mountPath: /var/run
          startupProbe:
            httpGet:
              path: /health/startup
              port: health
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 30
          readinessProbe:
            httpGet:
              path: /health/ready
              port: health
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /health/live
              port: health
            initialDelaySeconds: 10
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 3
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
              ephemeral-storage: 100Mi
            limits:
              cpu: 500m
              memory: 512Mi
              ephemeral-storage: 1Gi
      volumes:
        - name: tmp
          emptyDir: {}
        - name: var-run
          emptyDir: {}
