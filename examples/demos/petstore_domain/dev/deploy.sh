#!/bin/bash
# Quick deployment script for petstore-domain
# Generated by MMF CLI

set -e

# Configuration
SERVICE_NAME="petstore_domain"
IMAGE_NAME="petstore_domain:latest"
CLUSTER_NAME="${KIND_CLUSTER_NAME:-microservices-framework}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Build Docker image
log_info "Building Docker image..."
cd ../..
if docker build -f plugins/petstore_domain/Dockerfile -t "$IMAGE_NAME" .; then
    log_success "Docker image built successfully"
else
    log_error "Failed to build Docker image"
    exit 1
fi

# Load image into kind cluster
log_info "Loading image into kind cluster..."
if kind load docker-image "$IMAGE_NAME" --name "$CLUSTER_NAME"; then
    log_success "Image loaded into kind cluster"
else
    log_error "Failed to load image into kind cluster"
    exit 1
fi

# Apply Kubernetes manifests
log_info "Applying Kubernetes manifests..."
cd plugins/petstore_domain
if kubectl apply -f k8s/; then
    log_success "Kubernetes manifests applied"
else
    log_error "Failed to apply Kubernetes manifests"
    exit 1
fi

# Wait for deployment to be ready
log_info "Waiting for deployment to be ready..."
if kubectl wait --for=condition=available --timeout=300s deployment/$SERVICE_NAME; then
    log_success "Deployment is ready!"

    # Show deployment status
    log_info "Deployment status:"
    kubectl get pods,svc -l app=$SERVICE_NAME

    log_info "To start port forwarding, run: ./dev/port-forward.sh"
else
    log_error "Deployment failed to become ready"
    exit 1
fi
