#!/bin/bash
# Port forwarding script for petstore-domain service
# Generated by MMF CLI

set -e

# Configuration
SERVICE_NAME="petstore_domain-service"
LOCAL_PORT="${1:-8080}"
SERVICE_PORT="${2:-80}"
NAMESPACE="${3:-default}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if kubectl is available
check_kubectl() {
    if ! command -v kubectl &> /dev/null; then
        log_error "kubectl is not installed or not in PATH"
        exit 1
    fi
}

# Function to check if service exists
check_service() {
    local service_name=$1
    local namespace=$2

    if ! kubectl get service "$service_name" -n "$namespace" &> /dev/null; then
        log_error "Service '$service_name' not found in namespace '$namespace'"
        log_info "Available services:"
        kubectl get services -n "$namespace"
        exit 1
    fi
}

# Function to check if port is already in use
check_port() {
    local port=$1

    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
        log_warning "Port $port is already in use"
        log_info "Processes using port $port:"
        lsof -Pi :$port -sTCP:LISTEN

        read -p "Do you want to kill existing processes on port $port? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            log_info "Killing processes on port $port..."
            lsof -ti:$port | xargs kill -9 2>/dev/null || true
            sleep 2
        else
            log_error "Cannot proceed with port $port in use"
            exit 1
        fi
    fi
}

# Function to start port forwarding
start_port_forward() {
    local service_name=$1
    local local_port=$2
    local service_port=$3
    local namespace=$4

    log_info "Starting port forwarding for petstore-domain:"
    log_info "  Service: $service_name (namespace: $namespace)"
    log_info "  Local port: $local_port"
    log_info "  Service port: $service_port"

    # Start port forwarding in background
    kubectl port-forward "service/$service_name" "$local_port:$service_port" -n "$namespace" &
    PF_PID=$!

    # Wait a moment for port forwarding to establish
    sleep 3

    # Check if port forwarding is working
    if ps -p $PF_PID > /dev/null; then
        log_success "Port forwarding started successfully (PID: $PF_PID)"
        log_info "Access the service at: http://localhost:$local_port"

        # Test basic connectivity
        if command -v curl &> /dev/null; then
            log_info "Testing connectivity..."
            if curl -s "http://localhost:$local_port/health" > /dev/null 2>&1; then
                log_success "Health check passed!"
            else
                log_warning "Health check failed, but port forwarding is active"
            fi
        fi

        # Print useful endpoints
        log_info "Common endpoints to test:"
        log_info "  Health: http://localhost:$local_port/health"
        log_info "  Docs: http://localhost:$local_port/docs"
        log_info "  Metrics: http://localhost:$local_port/metrics"
        log_info "  Status: http://localhost:$local_port/api/v1/status"
        log_info "  petstore-domain: http://localhost:$local_port/api/v1/petstore-domain/health"
        log_info "  delivery-board: http://localhost:$local_port/api/v1/delivery-board/health"
        log_info "  payment-service: http://localhost:$local_port/api/v1/payment-service/health"

        # Keep the script running and handle cleanup on exit
        trap 'log_info "Stopping port forwarding..."; kill $PF_PID 2>/dev/null || true' EXIT

        log_info "Port forwarding is running. Press Ctrl+C to stop."
        wait $PF_PID
    else
        log_error "Failed to start port forwarding"
        exit 1
    fi
}

# Function to show help
show_help() {
    echo "petstore-domain Port Forwarding Helper"
    echo ""
    echo "Usage: $0 [local-port] [service-port] [namespace]"
    echo ""
    echo "Arguments:"
    echo "  local-port      Local port to forward to (default: 8080)"
    echo "  service-port    Service port to forward from (default: 80)"
    echo "  namespace       Kubernetes namespace (default: default)"
    echo ""
    echo "Examples:"
    echo "  $0                    # Forward petstore_domain-service:80 to localhost:8080"
    echo "  $0 8081              # Forward petstore_domain-service:80 to localhost:8081"
    echo "  $0 8081 8080         # Forward petstore_domain-service:8080 to localhost:8081"
}

# Handle help flag
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    show_help
    exit 0
fi

# Main execution
log_info "petstore-domain Port Forwarding Helper"
log_info "================================"

check_kubectl
check_service "$SERVICE_NAME" "$NAMESPACE"
check_port "$LOCAL_PORT"
start_port_forward "$SERVICE_NAME" "$LOCAL_PORT" "$SERVICE_PORT" "$NAMESPACE"
