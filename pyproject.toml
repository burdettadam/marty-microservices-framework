[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "marty-msf"
version = "1.0.0"
description = "Marty Microservices Framework - Enterprise-grade microservices platform"
authors = [
    {name = "Marty Framework Team", email = "team@marty-msf.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
keywords = ["microservices", "framework", "fastapi", "docker", "kubernetes"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: System :: Distributed Computing",
]

# Core dependencies - minimal set for basic functionality
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "python-multipart>=0.0.6",
    "click>=8.1.0",
    "rich>=14.2.0",
    "jinja2>=3.1.0",
    "toml>=0.10.2",
    "pyyaml>=6.0.0",
    "aiohttp>=3.13.0",
    "aiofiles>=24.1.0",
    "pydantic-settings>=2.11.0",
]

[tool.hatch.build.targets.wheel]
packages = ["src"]

# Optional dependency groups
[project.optional-dependencies]
# CLI and project generation tools
cli = [
    "cookiecutter>=2.5.0",
    "gitpython>=3.1.40",
]

# Messaging and event streaming
messaging = [
    "aiokafka>=0.12.0",
    "kafka-python>=2.2.15",
]

# gRPC support
grpc = [
    "grpcio>=1.75.1",
    "grpcio-tools>=1.75.1",
    "grpcio-reflection>=1.59.0",
]

# Database integration
database = [
    "sqlalchemy>=2.0.44",
]

# Testing and development
testing = [
    "docker>=7.1.0",
]

# Monitoring and metrics
monitoring = [
    "psutil>=7.1.0",
]

# Security features
security = [
    "bandit[toml]>=1.8.0",
    "defusedxml>=0.7.1",
    "pyjwt>=2.10.1",
    "cryptography>=46.0.2",
    "bcrypt>=5.0.0",
    "passlib>=1.7.4",
]

# Analytics and visualization dependencies (for performance testing, ML features)
analytics = [
    "matplotlib>=3.9.4",
    "seaborn>=0.13.2",
    "numpy>=2.0.2",
    "scipy>=1.11.0",
    "locust>=2.34.0",
]

microservices = [
    "aioredis>=2.0.1",
    "asyncpg>=0.29.0",
    "celery>=5.3.0",
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    "tenacity>=8.2.0",
    "httpx>=0.25.0",
]

# Cloud providers support
cloud = [
    "kubernetes>=28.1.0",
    "boto3>=1.34.0",
    "azure-identity>=1.15.0",
    "google-cloud-core>=2.4.0",
]

# Observability and monitoring
observability = [
    "prometheus-client>=0.23.1",
    "opentelemetry-api>=1.37.0",
    "opentelemetry-sdk>=1.37.0",
    "opentelemetry-exporter-otlp-proto-grpc>=1.37.0",
]

# Complete installation (all features)
all = [
    "marty-msf[cli,messaging,grpc,database,testing,monitoring,security,analytics,microservices,cloud,observability]"
]

[project.urls]
Homepage = "https://github.com/marty-framework/marty-microservices-framework"
Documentation = "https://marty-msf.readthedocs.io"
Repository = "https://github.com/marty-framework/marty-microservices-framework"
Issues = "https://github.com/marty-framework/marty-microservices-framework/issues"

[project.scripts]
marty = "marty_cli:cli"
marty-msf = "marty_cli:cli"

[dependency-groups]
dev = [
    # Testing framework and utilities
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-json-report>=1.5.0",
    "pytest-mock>=3.10.0",
    "pytest-playwright>=0.7.1",
    # Code quality and formatting
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.7.0",
    "ruff>=0.14.0",
    "bandit>=1.8.6",
    "pre-commit>=4.3.0",
    # Testing infrastructure and automation
    "playwright>=1.55.0",
    "testcontainers>=3.7.0",
    # Cloud and container tools
    "docker>=7.1.0",
    "kubernetes>=34.1.0",
    # Network and HTTP tools
    "aiohttp>=3.13.0",
    "httpx>=0.25.0",
    # Database tools
    "psycopg2-binary>=2.9.0",
    "redis>=4.5.0",
    # Logging and utilities
    "python-json-logger>=2.0.0",
    # Build and publishing tools
    "build>=1.3.0",
    "twine>=6.2.0",
    "radon>=6.0.1",
]

# Ruff configuration
[tool.ruff]
target-version = "py310"
line-length = 100
exclude = [
    ".git",
    ".venv",
    "build",
    "dist",
    "__pycache__",
    "templates/",
    "microservice_project_template/",
]

[tool.ruff.lint]
# Temporarily ignored issues - should be addressed in upcoming quality improvements
ignore = [
    # Complex structural changes needed
    "E501",  # line-too-long - requires careful refactoring
    "C901",  # complex-structure - requires architectural changes

    # Import-related (can be auto-fixed in many cases)
    "I001",  # unsorted-imports - can be auto-fixed
    "E402",  # module-import-not-at-top-of-file

    # Exception handling improvements needed
    "B904",  # raise-without-from-inside-except

    # Legacy code cleanup needed

    # Method/class design improvements
    "B027",  # empty-method-without-abstract-decorator
    "B024",  # abstract-base-class-without-abstract-method
]

select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "UP",   # pyupgrade
    "C",    # flake8-comprehensions
]

[tool.ruff.lint.per-file-ignores]
# FastAPI dependency injection patterns legitimately use Depends() in defaults
"examples/security_example.py" = ["B008"]
"src/framework/audit/examples.py" = ["B008"]
# Gateway __init__.py has structural issues with multiple __all__ declarations - needs separate cleanup
"src/framework/gateway/__init__.py" = ["F401"]
# Messaging __init__.py also has structural issues with multiple __all__ declarations - needs separate cleanup
"src/framework/messaging/__init__.py" = ["F401"]
# Validation scripts intentionally import modules for testing - imports are required
"validate_decomposition.py" = ["F401"]
# Queue module has duplicated import blocks and availability testing - needs structural cleanup
"src/framework/messaging/queue.py" = ["F401"]
# Optional dependency testing - imports used for availability checking
"security/compliance/risk_management.py" = ["F401"]
"security/monitoring.py" = ["F401"]
"security/threat_detection/event_processor.py" = ["F401"]
"security/threat_detection/ml_analytics.py" = ["F401"]
"src/framework/integration/external_connectors/test_imports.py" = ["F401"]
"src/framework/integration/external_connectors/tests/test_integration.py" = ["F401"]
"src/framework/monitoring/examples.py" = ["F401"]
"src/framework/observability/monitoring.py" = ["F401"]
"src/framework/observability/unified_observability.py" = ["F401"]
"tests/plugins/test_integration.py" = ["F401"]
"tests/unit/framework/test_deployment_strategies.py" = ["F401"]
"tests/unit/framework/test_resilience_strategies.py" = ["F401"]

[tool.uv.sources]
# rich = { git = "https://github.com/Textualize/rich.git" }  # Pinned to official release

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--asyncio-mode=auto",
    "--durations=10",
]
markers = [
    "unit: Unit tests - fast, isolated tests for individual components",
    "integration: Integration tests - test component interactions",
    "e2e: End-to-end tests - full workflow validation",
    "performance: Performance and load tests",
    "slow: Tests that take more than 5 seconds",
    "external: Tests that require external services",
    "database: Tests that require database access",
    "kafka: Tests that require Kafka/event bus",
    "redis: Tests that require Redis/caching",
    "docker: Tests that require Docker containers",
    "chaos: Chaos engineering tests",
    "security: Security and compliance tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
sort = "Cover"

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"
