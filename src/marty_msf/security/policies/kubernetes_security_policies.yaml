# Security Policies Template for Microservices Framework

# Network Security Policies
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: microservices
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress

---
# Allow ingress from ingress controller
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-ingress-controller
  namespace: microservices
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/type: microservice
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080

---
# Allow inter-service communication
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-inter-service
  namespace: microservices
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/type: microservice
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/type: microservice
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 50051  # gRPC
  egress:
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/type: microservice
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 50051  # gRPC

---
# Allow DNS resolution
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns
  namespace: microservices
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

---
# Allow access to external APIs (conditional)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-external-apis
  namespace: microservices
spec:
  podSelector:
    matchLabels:
      network-policy: allow-external
  policyTypes:
  - Egress
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS
    - protocol: TCP
      port: 80   # HTTP

---
# Pod Security Standards
apiVersion: v1
kind: Pod
metadata:
  name: microservice-template
  namespace: microservices
  annotations:
    # Pod Security Standards
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted
spec:
  # Security Context for the Pod
  securityContext:
    runAsNonRoot: true
    runAsUser: 10001
    runAsGroup: 10001
    fsGroup: 10001
    seccompProfile:
      type: RuntimeDefault

  containers:
  - name: microservice
    image: microservice:latest

    # Container Security Context
    securityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 10001
      runAsGroup: 10001
      capabilities:
        drop:
        - ALL
      seccompProfile:
        type: RuntimeDefault

    # Resource Limits
    resources:
      limits:
        cpu: "1"
        memory: "512Mi"
        ephemeral-storage: "1Gi"
      requests:
        cpu: "100m"
        memory: "128Mi"
        ephemeral-storage: "256Mi"

    # Probes for security and reliability
    livenessProbe:
      httpGet:
        path: /health
        port: 8080
        scheme: HTTP
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3

    readinessProbe:
      httpGet:
        path: /ready
        port: 8080
        scheme: HTTP
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 3

    # Environment variables (no secrets here)
    env:
    - name: LOG_LEVEL
      value: "INFO"
    - name: ENVIRONMENT
      value: "production"

    # Volume mounts for writable directories
    volumeMounts:
    - name: tmp
      mountPath: /tmp
    - name: var-log
      mountPath: /var/log
    - name: app-cache
      mountPath: /app/cache

  # Volumes for writable directories
  volumes:
  - name: tmp
    emptyDir: {}
  - name: var-log
    emptyDir: {}
  - name: app-cache
    emptyDir:
      sizeLimit: "100Mi"

---
# Service Account with minimal permissions
apiVersion: v1
kind: ServiceAccount
metadata:
  name: microservice-sa
  namespace: microservices
automountServiceAccountToken: false

---
# Minimal RBAC for service account
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: microservices
  name: microservice-role
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get"]
  resourceNames: ["microservice-secrets"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: microservice-rolebinding
  namespace: microservices
subjects:
- kind: ServiceAccount
  name: microservice-sa
  namespace: microservices
roleRef:
  kind: Role
  name: microservice-role
  apiGroup: rbac.authorization.k8s.io

---
# Secret management template
apiVersion: v1
kind: Secret
metadata:
  name: microservice-secrets
  namespace: microservices
  annotations:
    secret-management: external-secrets-operator
type: Opaque
data:
  # Secrets should be managed by external systems
  # This is a template showing the structure
  database-password: ""  # Base64 encoded
  api-key: ""            # Base64 encoded
  jwt-secret: ""         # Base64 encoded

---
# ConfigMap for non-sensitive configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: microservice-config
  namespace: microservices
data:
  # Application configuration
  app.yaml: |
    server:
      port: 8080
      host: "0.0.0.0"

    logging:
      level: "INFO"
      format: "json"

    metrics:
      enabled: true
      port: 9090
      path: "/metrics"

    health:
      enabled: true
      path: "/health"

    security:
      cors:
        enabled: true
        origins: []
      headers:
        enabled: true

    database:
      host: "postgres-service"
      port: 5432
      name: "microservice_db"
      max_connections: 20
      timeout: 30

    redis:
      host: "redis-service"
      port: 6379
      timeout: 5

---
# Ingress with security annotations
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: microservice-ingress
  namespace: microservices
  annotations:
    # Security annotations
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-RSA-AES128-GCM-SHA256,ECDHE-RSA-AES256-GCM-SHA384"

    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit-per-connection: "10"
    nginx.ingress.kubernetes.io/rate-limit-rate: "100"
    nginx.ingress.kubernetes.io/rate-limit-burst: "20"

    # Security headers
    nginx.ingress.kubernetes.io/custom-headers: "custom-headers"

    # CORS
    nginx.ingress.kubernetes.io/cors-enabled: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Authorization, Content-Type"
    nginx.ingress.kubernetes.io/cors-max-age: "86400"

    # WAF protection
    nginx.ingress.kubernetes.io/waf: "modsecurity"
    nginx.ingress.kubernetes.io/waf-rule-set: "owasp-crs"

    # Request size limits
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/client-body-buffer-size: "1m"

    # Timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"

spec:
  tls:
  - hosts:
    - api.example.com
    secretName: microservice-tls

  rules:
  - host: api.example.com
    http:
      paths:
      - path: /api/v1
        pathType: Prefix
        backend:
          service:
            name: microservice-service
            port:
              number: 80

---
# Security headers ConfigMap for Ingress
apiVersion: v1
kind: ConfigMap
metadata:
  name: custom-headers
  namespace: microservices
data:
  X-Content-Type-Options: "nosniff"
  X-Frame-Options: "DENY"
  X-XSS-Protection: "1; mode=block"
  Strict-Transport-Security: "max-age=31536000; includeSubDomains"
  Content-Security-Policy: "default-src 'self'"
  Referrer-Policy: "strict-origin-when-cross-origin"
  Permissions-Policy: "camera=(), microphone=(), geolocation=()"
