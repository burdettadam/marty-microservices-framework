[build-system]
requires = ["hatchling>=1.24"]
build-backend = "hatchling.build"

[project]
name = "microservice-template"
version = "0.1.0"
description = "Typed Python gRPC microservice template with observability, testing, and CI baked in."
readme = "README.md"
requires-python = ">=3.11"
authors = [{ name = "Your Name", email = "you@example.com" }]
keywords = ["grpc", "microservice", "kubernetes", "template", "observability"]
license = { text = "Proprietary" }
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Framework :: AsyncIO",
  "Topic :: Software Development :: Libraries :: Application Frameworks",
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers"
]
dependencies = [
  "grpcio>=1.62.0",
  "grpcio-tools>=1.62.0",
  "pydantic>=2.6.0",
  "pydantic-settings>=2.2.1",
  "python-dotenv>=1.0.1",
  "opentelemetry-sdk>=1.24.0",
  "opentelemetry-exporter-otlp>=1.24.0",
  "opentelemetry-instrumentation-grpc>=0.45b0",
  "prometheus-client>=0.20.0",
  "structlog>=24.1.0",
  "uvloop>=0.19.0; sys_platform != \"win32\"",
  # Statistical analysis dependencies
  "pandas>=2.1.0",
  "numpy>=1.24.0",
  "scipy>=1.11.0",
  "matplotlib>=3.7.0",
  "seaborn>=0.12.0",
  "plotly>=5.15.0",
  "scikit-learn>=1.3.0"
]

[project.optional-dependencies]
dev = [
  "mypy>=1.9.0",
  "pytest>=8.1.1",
  "pytest-asyncio>=0.23.5",
  "pytest-cov>=4.1.0",
  "pytest-timeout>=2.2.0",
  "ruff>=0.3.0",
  "types-protobuf>=5.26.0.20240216",
  "types-setuptools>=69.1.0.20240225",
  # Additional type stubs for data science libraries
  "pandas-stubs>=2.1.0",
  "types-seaborn>=0.12.0",
  "scipy-stubs>=1.11.0",
  "types-grpcio>=1.0.0"
]

[project.scripts]
microservice-template = "microservice_template.main:cli"

[tool.hatch.build.targets.wheel]
packages = ["src/microservice_template"]

[tool.pytest.ini_options]
addopts = "-ra --strict-config --strict-markers"
minversion = "8.0"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
  "unit: fast unit tests",
  "integration: medium-scope tests with real gRPC server",
  "e2e: end-to-end tests hitting the running CLI/service",
  "build: validates build and packaging"
]

[tool.mypy]
python_version = "3.11"
packages = ["microservice_template"]
strict = true
warn_unused_configs = true
disallow_any_generics = true
disallow_untyped_defs = true
warn_return_any = true
no_implicit_optional = true
warn_unused_ignores = true
allow_redefinition = false
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
    "microservice_template.proto.*",
    "microservice_template.service.greeter",
    "microservice_template.server"
]
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "sklearn.*",
    "seaborn",
    "matplotlib.*",
    "plotly.*"
]
ignore_missing_imports = true

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F", "B", "I", "UP", "N", "PT", "ASYNC", "RUF"]
ignore = ["E501"]

[tool.ruff.lint.isort]
known-first-party = ["microservice_template"]
combine-as-imports = true

[tool.ruff.lint.per-file-ignores]
"src/microservice_template/proto/*" = ["ALL"]  # Ignore all rules for generated proto files
"**/greeter_pb2*.py" = ["ALL"]  # Ignore all rules for generated proto files
"src/microservice_template/service/greeter.py" = ["N802"]  # Ignore function naming for gRPC methods
