"""
Configuration helpers for {{service_name}} service using unified configuration system.

This module provides convenience functions for accessing unified configuration
with service-specific defaults.
"""

from marty_msf.framework.config import UnifiedConfigurationManager
from typing import Any, Dict, Optional


async def get_service_config(config_manager: Optional[UnifiedConfigurationManager] = None) -> Dict[str, Any]:
    """
    Get service configuration with defaults using unified configuration system.

    Args:
        config_manager: Optional existing configuration manager instance

    Returns:
        Dictionary with service configuration
    """
    if config_manager is None:
        config_manager = UnifiedConfigurationManager()
        await config_manager.initialize()

    return {
        "service_name": config_manager.get("service.name", "{{service_name}}"),
        "service_version": config_manager.get("service.version", "1.0.0"),
        "grpc_port": config_manager.get("grpc.port", {{grpc_port}}),
        "grpc_max_workers": config_manager.get("grpc.max_workers", 10),
        "grpc_reflection": config_manager.get("grpc.reflection_enabled", True),
        "grpc_health_service": config_manager.get("grpc.health_service_enabled", True),
        "logging_level": config_manager.get("logging.level", "info"),
    }


def get_config_default(key: str, default_value: Any = None) -> Any:
    """
    Get a configuration default value for {{service_name}} service.

    Args:
        key: Configuration key
        default_value: Default value if not found

    Returns:
        Default configuration value
    """
    defaults = {
        "service.name": "{{service_name}}",
        "service.description": "{{service_description}}",
        "service.version": "1.0.0",
        "grpc.port": {{grpc_port}},
        "grpc.max_workers": 10,
        "grpc.reflection_enabled": True,
        "grpc.health_service_enabled": True,
        "logging.level": "info",
    }

    return defaults.get(key, default_value)
