"""
Main application for Caching Service
"""

import asyncio
import logging
import signal
import sys
from typing import Optional, Dict, Any
from contextlib import asynccontextmanager

from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
import uvicorn

from src.{{service_package}}.app.core.config import {{service_class}}ServiceConfig
from src.{{service_package}}.app.core.logging import setup_logging
from src.{{service_package}}.app.core.monitoring import (
    PrometheusMetrics,
    setup_health_checks,
    setup_metrics_endpoint
)
from src.{{service_package}}.app.caching.cache_manager import get_cache_manager
from src.{{service_package}}.app.caching.distributed_lock import get_lock_manager
from src.{{service_package}}.app.api.v1.cache import router as cache_router
from src.{{service_package}}.app.api.v1.health import router as health_router

logger = logging.getLogger(__name__)


class {{service_class}}CachingService:
    """Main caching service application."""

    def __init__(self):
        """Initialize the caching service."""
        self.config = {{service_class}}ServiceConfig()
        self.app: Optional[FastAPI] = None
        self.cache_manager = None
        self.lock_manager = None
        self.metrics = None
        self.is_running = False

    async def initialize(self) -> None:
        """Initialize the caching service components."""
        try:
            logger.info("Initializing {{service_class}} Caching Service...")

            # Setup logging
            setup_logging(
                level=self.config.log_level,
                format_type=self.config.log_format,
                include_trace=self.config.enable_request_tracing
            )

            # Initialize metrics
            if self.config.enable_metrics:
                self.metrics = PrometheusMetrics(
                    service_name=self.config.service_name,
                    service_version=self.config.service_version
                )

            # Initialize cache manager
            self.cache_manager = get_cache_manager()
            await self.cache_manager.initialize()

            # Initialize distributed lock manager
            self.lock_manager = get_lock_manager()
            await self.lock_manager.initialize()

            # Create FastAPI application
            self.app = await self._create_app()

            logger.info("{{service_class}} Caching Service initialized successfully")

        except Exception as e:
            logger.error(f"Failed to initialize caching service: {e}")
            raise

    async def _create_app(self) -> FastAPI:
        """Create and configure the FastAPI application."""

        @asynccontextmanager
        async def lifespan(app: FastAPI):
            """Application lifespan manager."""
            # Startup
            logger.info("Starting {{service_class}} Caching Service...")

            # Setup health checks
            if self.config.enable_health_checks:
                setup_health_checks(app, {
                    "cache": self.cache_manager.health_check,
                    "locks": self.lock_manager.health_check
                })

            # Setup metrics endpoint
            if self.config.enable_metrics and self.metrics:
                setup_metrics_endpoint(app, self.metrics)

            self.is_running = True
            logger.info("{{service_class}} Caching Service started successfully")

            yield

            # Shutdown
            logger.info("Shutting down {{service_class}} Caching Service...")
            await self.shutdown()

        # Create FastAPI app
        app = FastAPI(
            title="{{service_class}} Caching Service",
            description="Enterprise caching service with Redis, distributed locking, and cache patterns",
            version=self.config.service_version,
            docs_url="/docs" if self.config.enable_docs else None,
            redoc_url="/redoc" if self.config.enable_docs else None,
            openapi_url="/openapi.json" if self.config.enable_docs else None,
            lifespan=lifespan
        )

        # Add middleware
        await self._setup_middleware(app)

        # Add routers
        app.include_router(health_router, prefix="/health", tags=["health"])
        app.include_router(cache_router, prefix="/api/v1", tags=["cache"])

        return app

    async def _setup_middleware(self, app: FastAPI) -> None:
        """Setup application middleware."""

        # CORS middleware
        if self.config.enable_cors:
            app.add_middleware(
                CORSMiddleware,
                allow_origins=self.config.cors_origins,
                allow_credentials=self.config.cors_allow_credentials,
                allow_methods=self.config.cors_allow_methods,
                allow_headers=self.config.cors_allow_headers,
            )

        # Trusted host middleware
        if self.config.trusted_hosts:
            app.add_middleware(
                TrustedHostMiddleware,
                allowed_hosts=self.config.trusted_hosts
            )

        # Request tracing middleware
        if self.config.enable_request_tracing:
            from src.{{service_package}}.app.middleware.tracing import TracingMiddleware
            app.add_middleware(TracingMiddleware)

        # Metrics middleware
        if self.config.enable_metrics and self.metrics:
            from src.{{service_package}}.app.middleware.metrics import MetricsMiddleware
            app.add_middleware(MetricsMiddleware, metrics=self.metrics)

        # Rate limiting middleware
        if self.config.enable_rate_limiting:
            from src.{{service_package}}.app.middleware.rate_limiting import RateLimitingMiddleware
            app.add_middleware(
                RateLimitingMiddleware,
                cache_manager=self.cache_manager,
                default_limit=self.config.default_rate_limit,
                time_window=self.config.rate_limit_window
            )

    async def run(self) -> None:
        """Run the caching service."""
        if not self.app:
            await self.initialize()

        # Setup signal handlers
        self._setup_signal_handlers()

        # Run the server
        config = uvicorn.Config(
            app=self.app,
            host=self.config.host,
            port=self.config.port,
            log_level=self.config.log_level.lower(),
            access_log=self.config.enable_access_logs,
            server_header=False,
            date_header=False,
            workers=1  # Single worker for proper shutdown handling
        )

        server = uvicorn.Server(config)

        try:
            await server.serve()
        except Exception as e:
            logger.error(f"Server error: {e}")
            raise

    def _setup_signal_handlers(self) -> None:
        """Setup signal handlers for graceful shutdown."""
        def signal_handler(signum, frame):
            logger.info(f"Received signal {signum}, initiating graceful shutdown...")
            asyncio.create_task(self.shutdown())

        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)

    async def shutdown(self) -> None:
        """Shutdown the caching service gracefully."""
        if not self.is_running:
            return

        try:
            logger.info("Shutting down caching service components...")

            # Shutdown distributed lock manager
            if self.lock_manager:
                await self.lock_manager.shutdown()
                logger.debug("Lock manager shutdown complete")

            # Shutdown cache manager
            if self.cache_manager:
                await self.cache_manager.shutdown()
                logger.debug("Cache manager shutdown complete")

            self.is_running = False
            logger.info("{{service_class}} Caching Service shutdown complete")

        except Exception as e:
            logger.error(f"Error during shutdown: {e}")


# Global service instance
_caching_service: Optional[{{service_class}}CachingService] = None


def get_caching_service() -> {{service_class}}CachingService:
    """Get the global caching service instance."""
    global _caching_service
    if _caching_service is None:
        _caching_service = {{service_class}}CachingService()
    return _caching_service


async def main():
    """Main entry point for the caching service."""
    try:
        service = get_caching_service()
        await service.run()
    except KeyboardInterrupt:
        logger.info("Received keyboard interrupt, shutting down...")
    except Exception as e:
        logger.error(f"Fatal error in caching service: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
