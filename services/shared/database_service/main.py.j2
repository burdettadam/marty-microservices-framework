"""
{{service_description}}

This is a database-centric service generated from the Marty template.
Features:
- SQLAlchemy ORM with PostgreSQL
- Database connection pooling
- Alembic migrations
- Repository pattern implementation
- Connection health checks
- Transaction management
"""

import sys
from pathlib import Path

# Ensure we can import from the parent directory
sys.path.append(str(Path(__file__).resolve().parents[3]))

from marty_msf.framework.grpc import UnifiedGrpcServer, ServiceDefinition, create_grpc_server
from marty_common.service_config_factory import get_config_manager
from marty_common.logging_config import get_logger

# Database imports
from src.{{service_package}}.app.core.database import DatabaseManager, engine
from src.{{service_package}}.app.core.config import {{service_class}}Config
from src.{{service_package}}.app.models import Base
from src.{{service_package}}.app.repositories import setup_repositories

# Get configuration and logger using DRY factory
config_manager = get_config_manager("{{service_name}}")
config = {{service_class}}Config()
logger = get_logger(__name__)


async def create_tables():
    """Create database tables if they don't exist."""
    try:
        # Create all tables
        Base.metadata.create_all(bind=engine)
        logger.info("Database tables created successfully")
    except Exception as e:
        logger.error(f"Failed to create database tables: {e}")
        raise


async def main():
    """Main service entry point with database initialization."""
    logger.info("Starting {{service_name}} service...")

    # Initialize database
    db_manager = DatabaseManager(config.database_url)
    await db_manager.initialize()

    # Create tables
    await create_tables()

    # Setup repositories
    setup_repositories(db_manager)

    logger.info("Database initialized successfully")

    # Start the gRPC service using DRY patterns
    # Create and start gRPC server
    grpc_server = create_grpc_server(
        port=config_manager.get("grpc_port", 50051),
        enable_health_service=True,
        enable_reflection=True
    )

    # Import and register the database service
    from database_service import DatabaseService

    service_definition = ServiceDefinition(
        service_class=DatabaseService,
        service_name="{{service_name}}",
        priority=1
    )

    await grpc_server.register_service(service_definition)
    await grpc_server.start()

    try:
        await grpc_server.wait_for_termination()
    finally:
        await grpc_server.stop(grace=30)


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
