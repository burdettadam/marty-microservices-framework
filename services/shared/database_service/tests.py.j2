"""
{{service_name}} database service tests.
"""

import pytest
import asyncio
from uuid import uuid4
from datetime import datetime

from src.{{service_package}}.app.core.database import get_database_manager
from src.{{service_package}}.app.repositories import (
    get_entity_repository,
    get_attribute_repository,
    get_audit_repository
)
from src.{{service_package}}.app.core.models import {{service_class}}Entity, {{service_class}}Attribute, {{service_class}}AuditLog


@pytest.fixture
async def db_manager():
    """Database manager fixture."""
    manager = get_database_manager()

    # Create tables for testing
    await manager.create_tables()

    yield manager

    # Cleanup after tests
    await manager.drop_tables()


@pytest.fixture
def entity_repo():
    """Entity repository fixture."""
    return get_entity_repository()


@pytest.fixture
def attribute_repo():
    """Attribute repository fixture."""
    return get_attribute_repository()


@pytest.fixture
def audit_repo():
    """Audit repository fixture."""
    return get_audit_repository()


class TestEntityRepository:
    """Test entity repository operations."""

    @pytest.mark.asyncio
    async def test_create_entity(self, db_manager, entity_repo):
        """Test creating an entity."""
        with db_manager.get_transaction() as session:
            entity = entity_repo.create(
                session=session,
                name="Test Entity",
                description="A test entity",
                status="active"
            )

            assert entity.id is not None
            assert entity.name == "Test Entity"
            assert entity.description == "A test entity"
            assert entity.status == "active"
            assert entity.created_at is not None
            assert entity.updated_at is not None

    @pytest.mark.asyncio
    async def test_get_entity_by_id(self, db_manager, entity_repo):
        """Test getting an entity by ID."""
        with db_manager.get_transaction() as session:
            # Create entity
            created_entity = entity_repo.create(
                session=session,
                name="Test Entity",
                description="A test entity",
                status="active"
            )

            # Get entity by ID
            retrieved_entity = entity_repo.get_by_id(session, created_entity.id)

            assert retrieved_entity is not None
            assert retrieved_entity.id == created_entity.id
            assert retrieved_entity.name == created_entity.name

    @pytest.mark.asyncio
    async def test_update_entity(self, db_manager, entity_repo):
        """Test updating an entity."""
        with db_manager.get_transaction() as session:
            # Create entity
            entity = entity_repo.create(
                session=session,
                name="Test Entity",
                description="Original description",
                status="active"
            )

            # Update entity
            updated_entity = entity_repo.update(
                session=session,
                entity_id=entity.id,
                name="Updated Entity",
                description="Updated description",
                status="inactive"
            )

            assert updated_entity is not None
            assert updated_entity.name == "Updated Entity"
            assert updated_entity.description == "Updated description"
            assert updated_entity.status == "inactive"
            assert updated_entity.version == 2

    @pytest.mark.asyncio
    async def test_soft_delete_entity(self, db_manager, entity_repo):
        """Test soft deleting an entity."""
        with db_manager.get_transaction() as session:
            # Create entity
            entity = entity_repo.create(
                session=session,
                name="Test Entity",
                status="active"
            )

            # Soft delete
            success = entity_repo.delete(session, entity.id, soft_delete=True)
            assert success

            # Entity should not be found in normal queries
            retrieved_entity = entity_repo.get_by_id(session, entity.id)
            assert retrieved_entity is None

            # But should be found with include_deleted=True
            deleted_entity = entity_repo.get_by_id(session, entity.id, include_deleted=True)
            assert deleted_entity is not None
            assert deleted_entity.deleted_at is not None

    @pytest.mark.asyncio
    async def test_search_entities(self, db_manager, entity_repo):
        """Test searching entities."""
        with db_manager.get_transaction() as session:
            # Create test entities
            entity_repo.create(session=session, name="Apple Product", status="active")
            entity_repo.create(session=session, name="Apple Fruit", status="active")
            entity_repo.create(session=session, name="Orange Fruit", status="active")

            # Search for entities with "Apple" in name
            apple_entities = entity_repo.search(session, "Apple", limit=10)
            assert len(apple_entities) == 2

            # Search for entities with "Fruit" in name
            fruit_entities = entity_repo.search(session, "Fruit", limit=10)
            assert len(fruit_entities) == 2


class TestAttributeRepository:
    """Test attribute repository operations."""

    @pytest.mark.asyncio
    async def test_create_attribute(self, db_manager, entity_repo, attribute_repo):
        """Test creating an attribute."""
        with db_manager.get_transaction() as session:
            # Create entity first
            entity = entity_repo.create(
                session=session,
                name="Test Entity",
                status="active"
            )

            # Create attribute
            attribute = attribute_repo.create(
                session=session,
                entity_id=entity.id,
                attribute_name="color",
                attribute_value="blue",
                attribute_type="string"
            )

            assert attribute.id is not None
            assert attribute.entity_id == entity.id
            assert attribute.attribute_name == "color"
            assert attribute.attribute_value == "blue"
            assert attribute.attribute_type == "string"

    @pytest.mark.asyncio
    async def test_get_attributes_by_entity_id(self, db_manager, entity_repo, attribute_repo):
        """Test getting attributes by entity ID."""
        with db_manager.get_transaction() as session:
            # Create entity
            entity = entity_repo.create(
                session=session,
                name="Test Entity",
                status="active"
            )

            # Create attributes
            attribute_repo.create(
                session=session,
                entity_id=entity.id,
                attribute_name="color",
                attribute_value="blue",
                attribute_type="string"
            )
            attribute_repo.create(
                session=session,
                entity_id=entity.id,
                attribute_name="size",
                attribute_value="large",
                attribute_type="string"
            )

            # Get attributes
            attributes = attribute_repo.get_by_entity_id(session, entity.id)
            assert len(attributes) == 2

            attribute_names = [attr.attribute_name for attr in attributes]
            assert "color" in attribute_names
            assert "size" in attribute_names


class TestAuditRepository:
    """Test audit repository operations."""

    @pytest.mark.asyncio
    async def test_log_change(self, db_manager, entity_repo, audit_repo):
        """Test logging a change."""
        with db_manager.get_transaction() as session:
            # Create entity
            entity = entity_repo.create(
                session=session,
                name="Test Entity",
                status="active"
            )

            # Log a change
            audit_log = audit_repo.log_change(
                session=session,
                entity_id=entity.id,
                entity_type="{{service_class}}Entity",
                action="CREATE",
                new_values={"name": "Test Entity", "status": "active"},
                user_id="test_user",
                session_id="test_session"
            )

            assert audit_log.id is not None
            assert audit_log.entity_id == entity.id
            assert audit_log.entity_type == "{{service_class}}Entity"
            assert audit_log.action == "CREATE"
            assert audit_log.user_id == "test_user"

    @pytest.mark.asyncio
    async def test_get_audit_trail(self, db_manager, entity_repo, audit_repo):
        """Test getting audit trail for an entity."""
        with db_manager.get_transaction() as session:
            # Create entity
            entity = entity_repo.create(
                session=session,
                name="Test Entity",
                status="active"
            )

            # Log multiple changes
            audit_repo.log_change(
                session=session,
                entity_id=entity.id,
                entity_type="{{service_class}}Entity",
                action="CREATE",
                new_values={"name": "Test Entity"},
                user_id="user1"
            )

            audit_repo.log_change(
                session=session,
                entity_id=entity.id,
                entity_type="{{service_class}}Entity",
                action="UPDATE",
                old_values={"status": "active"},
                new_values={"status": "inactive"},
                user_id="user2"
            )

            # Get audit trail
            audit_trail = audit_repo.get_audit_trail(session, entity.id)
            assert len(audit_trail) == 2

            # Should be ordered by timestamp (newest first)
            actions = [log.action for log in audit_trail]
            assert actions == ["UPDATE", "CREATE"]


class TestDatabaseManager:
    """Test database manager operations."""

    @pytest.mark.asyncio
    async def test_health_check(self, db_manager):
        """Test database health check."""
        health = await db_manager.health_check()
        assert health is True

    @pytest.mark.asyncio
    async def test_connection_info(self, db_manager):
        """Test getting connection info."""
        info = db_manager.get_connection_info()
        assert info is not None
        assert "host" in info
        assert "database" in info

    @pytest.mark.asyncio
    async def test_transaction_context(self, db_manager):
        """Test transaction context manager."""
        try:
            with db_manager.get_transaction() as session:
                # Should be able to use the session
                assert session is not None
                # Transaction should commit automatically
        except Exception as e:
            pytest.fail(f"Transaction context failed: {e}")

    @pytest.mark.asyncio
    async def test_transaction_rollback(self, db_manager):
        """Test transaction rollback on exception."""
        entity_repo = get_entity_repository()

        try:
            with db_manager.get_transaction() as session:
                # Create entity
                entity = entity_repo.create(
                    session=session,
                    name="Test Entity",
                    status="active"
                )
                entity_id = entity.id

                # Raise exception to trigger rollback
                raise ValueError("Test rollback")

        except ValueError:
            pass  # Expected exception

        # Entity should not exist due to rollback
        with db_manager.get_session() as session:
            entity = entity_repo.get_by_id(session, entity_id)
            assert entity is None


# Integration tests
class TestServiceIntegration:
    """Test service integration with database."""

    @pytest.mark.asyncio
    async def test_full_entity_lifecycle(self, db_manager, entity_repo, attribute_repo, audit_repo):
        """Test complete entity lifecycle with audit trail."""
        with db_manager.get_transaction() as session:
            # Create entity
            entity = entity_repo.create(
                session=session,
                name="Integration Test Entity",
                description="Testing full lifecycle",
                status="active",
                external_id="ext-123"
            )

            # Log creation
            audit_repo.log_change(
                session=session,
                entity_id=entity.id,
                entity_type="{{service_class}}Entity",
                action="CREATE",
                new_values={
                    "name": entity.name,
                    "status": entity.status
                },
                user_id="test_user"
            )

            # Add attributes
            color_attr = attribute_repo.create(
                session=session,
                entity_id=entity.id,
                attribute_name="color",
                attribute_value="blue",
                attribute_type="string"
            )

            size_attr = attribute_repo.create(
                session=session,
                entity_id=entity.id,
                attribute_name="size",
                attribute_value="10",
                attribute_type="number"
            )

            # Update entity
            updated_entity = entity_repo.update(
                session=session,
                entity_id=entity.id,
                status="inactive"
            )

            # Log update
            audit_repo.log_change(
                session=session,
                entity_id=entity.id,
                entity_type="{{service_class}}Entity",
                action="UPDATE",
                old_values={"status": "active"},
                new_values={"status": "inactive"},
                user_id="test_user"
            )

            # Verify final state
            final_entity = entity_repo.get_by_id(session, entity.id)
            assert final_entity.status == "inactive"
            assert final_entity.version == 2

            # Verify attributes
            attributes = attribute_repo.get_by_entity_id(session, entity.id)
            assert len(attributes) == 2

            # Verify audit trail
            audit_trail = audit_repo.get_audit_trail(session, entity.id)
            assert len(audit_trail) == 2
            assert audit_trail[0].action == "UPDATE"
            assert audit_trail[1].action == "CREATE"
