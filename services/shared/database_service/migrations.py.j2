"""
Migration utilities for {{service_name}}.
"""

import asyncio
import logging
from typing import Optional

from alembic import command, script
from alembic.config import Config
from alembic.migration import MigrationContext
from alembic.operations import Operations

from src.{{service_package}}.app.core.database import get_database_manager

logger = logging.getLogger(__name__)


class MigrationManager:
    """Manages database migrations for {{service_name}}."""

    def __init__(self, alembic_cfg_path: str = "alembic.ini"):
        """Initialize migration manager.

        Args:
            alembic_cfg_path: Path to alembic configuration file
        """
        self.alembic_cfg = Config(alembic_cfg_path)
        self.db_manager = get_database_manager()

    def get_current_revision(self) -> Optional[str]:
        """Get the current database revision."""
        try:
            with self.db_manager.get_connection() as conn:
                context = MigrationContext.configure(conn)
                return context.get_current_revision()
        except Exception as e:
            logger.error(f"Error getting current revision: {e}")
            return None

    def get_head_revision(self) -> Optional[str]:
        """Get the head revision from migration scripts."""
        try:
            script_dir = script.ScriptDirectory.from_config(self.alembic_cfg)
            return script_dir.get_current_head()
        except Exception as e:
            logger.error(f"Error getting head revision: {e}")
            return None

    def is_migration_needed(self) -> bool:
        """Check if database migration is needed."""
        current = self.get_current_revision()
        head = self.get_head_revision()

        if current is None and head is not None:
            return True  # No migrations applied yet

        return current != head

    def upgrade_to_head(self) -> bool:
        """Upgrade database to the latest revision.

        Returns:
            True if upgrade was successful, False otherwise
        """
        try:
            logger.info("Starting database migration to head...")
            command.upgrade(self.alembic_cfg, "head")
            logger.info("Database migration completed successfully")
            return True
        except Exception as e:
            logger.error(f"Error during database migration: {e}")
            return False

    def upgrade_to_revision(self, revision: str) -> bool:
        """Upgrade database to a specific revision.

        Args:
            revision: Target revision identifier

        Returns:
            True if upgrade was successful, False otherwise
        """
        try:
            logger.info(f"Starting database migration to revision {revision}...")
            command.upgrade(self.alembic_cfg, revision)
            logger.info(f"Database migration to {revision} completed successfully")
            return True
        except Exception as e:
            logger.error(f"Error during database migration to {revision}: {e}")
            return False

    def downgrade_to_revision(self, revision: str) -> bool:
        """Downgrade database to a specific revision.

        Args:
            revision: Target revision identifier

        Returns:
            True if downgrade was successful, False otherwise
        """
        try:
            logger.info(f"Starting database downgrade to revision {revision}...")
            command.downgrade(self.alembic_cfg, revision)
            logger.info(f"Database downgrade to {revision} completed successfully")
            return True
        except Exception as e:
            logger.error(f"Error during database downgrade to {revision}: {e}")
            return False

    def create_migration(self, message: str, autogenerate: bool = True) -> bool:
        """Create a new migration.

        Args:
            message: Migration message
            autogenerate: Whether to autogenerate migration content

        Returns:
            True if migration was created successfully, False otherwise
        """
        try:
            logger.info(f"Creating new migration: {message}")
            command.revision(
                self.alembic_cfg,
                message=message,
                autogenerate=autogenerate
            )
            logger.info("Migration created successfully")
            return True
        except Exception as e:
            logger.error(f"Error creating migration: {e}")
            return False

    def get_migration_history(self) -> list:
        """Get migration history."""
        try:
            script_dir = script.ScriptDirectory.from_config(self.alembic_cfg)
            revisions = []

            for rev in script_dir.walk_revisions():
                revisions.append({
                    'revision': rev.revision,
                    'down_revision': rev.down_revision,
                    'doc': rev.doc,
                    'module_path': rev.module_path
                })

            return revisions
        except Exception as e:
            logger.error(f"Error getting migration history: {e}")
            return []

    def validate_migrations(self) -> bool:
        """Validate that all migrations are consistent.

        Returns:
            True if migrations are valid, False otherwise
        """
        try:
            script_dir = script.ScriptDirectory.from_config(self.alembic_cfg)
            script_dir.get_current_head()  # This will raise if inconsistent
            logger.info("Migration validation successful")
            return True
        except Exception as e:
            logger.error(f"Migration validation failed: {e}")
            return False

    async def auto_migrate(self) -> bool:
        """Automatically apply migrations if needed.

        Returns:
            True if migrations were applied successfully or not needed, False otherwise
        """
        try:
            if not self.is_migration_needed():
                logger.info("No migrations needed")
                return True

            current = self.get_current_revision()
            head = self.get_head_revision()

            logger.info(f"Migration needed: current={current}, head={head}")

            # Apply migrations
            success = self.upgrade_to_head()

            if success:
                logger.info("Auto-migration completed successfully")
            else:
                logger.error("Auto-migration failed")

            return success

        except Exception as e:
            logger.error(f"Error during auto-migration: {e}")
            return False


# Global migration manager instance
_migration_manager: Optional[MigrationManager] = None


def get_migration_manager() -> MigrationManager:
    """Get the global migration manager instance."""
    global _migration_manager
    if _migration_manager is None:
        _migration_manager = MigrationManager()
    return _migration_manager


async def auto_migrate_on_startup() -> bool:
    """Run auto-migration on service startup.

    Returns:
        True if migrations were successful or not needed, False otherwise
    """
    try:
        migration_manager = get_migration_manager()
        return await migration_manager.auto_migrate()
    except Exception as e:
        logger.error(f"Error during startup migration: {e}")
        return False
