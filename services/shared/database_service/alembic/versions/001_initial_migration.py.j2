"""Initial migration for {{service_name}}

Revision ID: 001
Revises:
Create Date: 2024-01-01 12:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '001'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    """Create initial tables for {{service_name}}."""
    # Create entities table
    op.create_table(
        '{{service_package}}_entities',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('name', sa.String(length=255), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('external_id', sa.String(length=255), nullable=True),
        sa.Column('status', sa.String(length=50), nullable=False),
        sa.Column('metadata_', sa.JSON(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('version', sa.Integer(), nullable=False, server_default='1'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('external_id', name='uq_{{service_package}}_entities_external_id')
    )

    # Create indexes for entities table
    op.create_index('ix_{{service_package}}_entities_name', '{{service_package}}_entities', ['name'])
    op.create_index('ix_{{service_package}}_entities_status', '{{service_package}}_entities', ['status'])
    op.create_index('ix_{{service_package}}_entities_created_at', '{{service_package}}_entities', ['created_at'])
    op.create_index('ix_{{service_package}}_entities_deleted_at', '{{service_package}}_entities', ['deleted_at'])

    # Create attributes table
    op.create_table(
        '{{service_package}}_attributes',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('entity_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('attribute_name', sa.String(length=255), nullable=False),
        sa.Column('attribute_value', sa.Text(), nullable=True),
        sa.Column('attribute_type', sa.String(length=50), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('version', sa.Integer(), nullable=False, server_default='1'),
        sa.ForeignKeyConstraint(['entity_id'], ['{{service_package}}_entities.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )

    # Create indexes for attributes table
    op.create_index('ix_{{service_package}}_attributes_entity_id', '{{service_package}}_attributes', ['entity_id'])
    op.create_index('ix_{{service_package}}_attributes_name', '{{service_package}}_attributes', ['attribute_name'])
    op.create_index('ix_{{service_package}}_attributes_type', '{{service_package}}_attributes', ['attribute_type'])
    op.create_index('ix_{{service_package}}_attributes_deleted_at', '{{service_package}}_attributes', ['deleted_at'])

    # Create unique constraint for entity_id + attribute_name (for active records)
    op.create_index(
        'uq_{{service_package}}_attributes_entity_name_active',
        '{{service_package}}_attributes',
        ['entity_id', 'attribute_name'],
        unique=True,
        postgresql_where=sa.text('deleted_at IS NULL')
    )

    # Create audit logs table
    op.create_table(
        '{{service_package}}_audit_logs',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('entity_id', postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column('entity_type', sa.String(length=255), nullable=False),
        sa.Column('action', sa.String(length=50), nullable=False),
        sa.Column('old_values', sa.JSON(), nullable=True),
        sa.Column('new_values', sa.JSON(), nullable=True),
        sa.Column('user_id', sa.String(length=255), nullable=True),
        sa.Column('session_id', sa.String(length=255), nullable=True),
        sa.Column('ip_address', sa.String(length=45), nullable=True),
        sa.Column('user_agent', sa.Text(), nullable=True),
        sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('additional_info', sa.JSON(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )

    # Create indexes for audit logs table
    op.create_index('ix_{{service_package}}_audit_logs_entity_id', '{{service_package}}_audit_logs', ['entity_id'])
    op.create_index('ix_{{service_package}}_audit_logs_entity_type', '{{service_package}}_audit_logs', ['entity_type'])
    op.create_index('ix_{{service_package}}_audit_logs_action', '{{service_package}}_audit_logs', ['action'])
    op.create_index('ix_{{service_package}}_audit_logs_user_id', '{{service_package}}_audit_logs', ['user_id'])
    op.create_index('ix_{{service_package}}_audit_logs_timestamp', '{{service_package}}_audit_logs', ['timestamp'])
    op.create_index('ix_{{service_package}}_audit_logs_session_id', '{{service_package}}_audit_logs', ['session_id'])


def downgrade() -> None:
    """Drop all tables for {{service_name}}."""
    op.drop_table('{{service_package}}_audit_logs')
    op.drop_table('{{service_package}}_attributes')
    op.drop_table('{{service_package}}_entities')
