"""
Database migrations for {{service_name}}.
Alembic configuration and migration utilities.
"""

import os
import sys
from logging.config import fileConfig

from sqlalchemy import engine_from_config, pool
from alembic import context

# Add the service package to the path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.{{service_package}}.app.core.config import {{service_class}}ServiceConfig
from src.{{service_package}}.app.core.models import Base

# Alembic Config object
config = context.config

# Interpret the config file for Python logging
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# Set the SQLAlchemy metadata object for autogenerate support
target_metadata = Base.metadata

# Service configuration
service_config = {{service_class}}ServiceConfig()


def get_database_url():
    """Get the database URL from service configuration."""
    return service_config.database_url


def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well. By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.
    """
    url = get_database_url()
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        compare_type=True,
        compare_server_default=True,
        include_object=include_object,
        render_as_batch=True,  # For SQLite compatibility
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.
    """
    # Override the database URL in the configuration
    configuration = config.get_section(config.config_ini_section)
    configuration["sqlalchemy.url"] = get_database_url()

    connectable = engine_from_config(
        configuration,
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            compare_type=True,
            compare_server_default=True,
            include_object=include_object,
            render_as_batch=True,  # For SQLite compatibility
        )

        with context.begin_transaction():
            context.run_migrations()


def include_object(object, name, type_, reflected, compare_to):
    """Determine what objects to include in migrations.

    This function is called for each object during autogenerate
    to determine whether it should be included in the migration.
    """
    # Skip tables that don't belong to this service
    if type_ == "table":
        # Only include tables with the service prefix
        service_prefix = "{{service_package}}_"
        if not name.startswith(service_prefix) and name not in [
            "{{service_package}}_entities",
            "{{service_package}}_attributes",
            "{{service_package}}_audit_logs"
        ]:
            return False

    return True


def render_item(type_, obj, autogen_context):
    """Apply custom rendering for certain items during autogenerate."""
    # Handle custom column types if needed
    if type_ == "type":
        # Add custom type handling here if needed
        pass

    return False


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
