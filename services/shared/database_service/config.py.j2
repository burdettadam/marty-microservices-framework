"""
Database service configuration using unified configuration system.
"""

from typing import Any, Dict, Optional
from marty_msf.framework.config import UnifiedConfigurationManager
from marty_msf.framework.secrets import UnifiedSecrets


async def get_database_service_config(
    config_manager: Optional[UnifiedConfigurationManager] = None,
    secrets_manager: Optional[UnifiedSecrets] = None
) -> Dict[str, Any]:
    """
    Get database service configuration using unified configuration and secrets.

    Args:
        config_manager: Optional existing configuration manager instance
        secrets_manager: Optional existing secrets manager instance

    Returns:
        Dictionary with database service configuration
    """
    if config_manager is None:
        config_manager = UnifiedConfigurationManager()
        await config_manager.initialize()

    if secrets_manager is None:
        secrets_manager = UnifiedSecrets()
        await secrets_manager.initialize()

    # Database URL from secrets with fallback to config
    database_url = await secrets_manager.get_secret("database_url",
                                                   config_manager.get("database.url", "postgresql://user:password@localhost:5432/{{service_package}}_db"))

    return {
        # Service metadata
        "service_name": config_manager.get("service.name", "{{service_name}}"),
        "service_version": config_manager.get("service.version", "1.0.0"),

        # Database configuration
        "database_url": database_url,
        "database_pool_size": config_manager.get("database.pool_size", 10),
        "database_max_overflow": config_manager.get("database.max_overflow", 20),
        "database_pool_timeout": config_manager.get("database.pool_timeout", 30),
        "database_pool_recycle": config_manager.get("database.pool_recycle", 3600),
        "database_echo": config_manager.get("database.echo", False),

        # Migration settings
        "alembic_config_path": config_manager.get("database.alembic_config_path", "alembic.ini"),

        # Health check settings
        "database_health_check_timeout": config_manager.get("database.health_check_timeout", 5),

        # Transaction settings
        "default_transaction_timeout": config_manager.get("database.transaction_timeout", 30),

        # Query settings
        "query_timeout": config_manager.get("database.query_timeout", 30),

        # Logging
        "log_sql_queries": config_manager.get("database.log_sql_queries", False),

        # Connection retry settings
        "connection_retry_attempts": config_manager.get("database.connection_retry_attempts", 3),
        "connection_retry_delay": config_manager.get("database.connection_retry_delay", 1.0),

        # gRPC settings
        "grpc_port": config_manager.get("grpc.port", 50051),
        "grpc_max_workers": config_manager.get("grpc.max_workers", 10),
        "grpc_reflection": config_manager.get("grpc.reflection_enabled", True),
    }

    class Config:
        env_prefix = "{{service_name.upper().replace('-', '_')}}_"
