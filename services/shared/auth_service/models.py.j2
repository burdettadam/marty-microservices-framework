"""
Authentication Service Models
"""

import uuid
from datetime import datetime, timezone
from typing import Optional, Dict, Any, List
from enum import Enum
from sqlalchemy import (
    Column, String, Text, Boolean, DateTime, JSON, Integer, ForeignKey,
    UniqueConstraint, Index, CheckConstraint
)
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship, validates
from sqlalchemy.sql import func

Base = declarative_base()


class UserStatus(str, Enum):
    """User account status enumeration."""
    ACTIVE = "active"
    INACTIVE = "inactive"
    SUSPENDED = "suspended"
    PENDING_VERIFICATION = "pending_verification"
    LOCKED = "locked"


class SessionStatus(str, Enum):
    """Session status enumeration."""
    ACTIVE = "active"
    EXPIRED = "expired"
    REVOKED = "revoked"


class AuthProvider(str, Enum):
    """Authentication provider enumeration."""
    LOCAL = "local"
    GOOGLE = "google"
    GITHUB = "github"
    MICROSOFT = "microsoft"
    LDAP = "ldap"


class PermissionScope(str, Enum):
    """Permission scope enumeration."""
    GLOBAL = "global"
    SERVICE = "service"
    RESOURCE = "resource"


class BaseModel:
    """Base model with common fields."""

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    created_at = Column(DateTime(timezone=True), server_default=func.now(), nullable=False)
    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now(), nullable=False)
    version = Column(Integer, nullable=False, default=1)


class User(Base, BaseModel):
    """User account model."""

    __tablename__ = "{{service_package}}_users"

    # Basic user information
    username = Column(String(255), unique=True, nullable=False, index=True)
    email = Column(String(255), unique=True, nullable=False, index=True)
    password_hash = Column(Text, nullable=True)  # Nullable for OAuth-only users
    first_name = Column(String(255), nullable=True)
    last_name = Column(String(255), nullable=True)
    display_name = Column(String(255), nullable=True)

    # Account status and verification
    status = Column(String(50), nullable=False, default=UserStatus.ACTIVE.value, index=True)
    email_verified = Column(Boolean, nullable=False, default=False)
    email_verification_token = Column(String(255), nullable=True, unique=True)
    email_verification_expires = Column(DateTime(timezone=True), nullable=True)

    # Password management
    password_reset_token = Column(String(255), nullable=True, unique=True)
    password_reset_expires = Column(DateTime(timezone=True), nullable=True)
    password_changed_at = Column(DateTime(timezone=True), nullable=True)
    must_change_password = Column(Boolean, nullable=False, default=False)

    # Account security
    failed_login_attempts = Column(Integer, nullable=False, default=0)
    locked_until = Column(DateTime(timezone=True), nullable=True)
    last_login = Column(DateTime(timezone=True), nullable=True)
    last_login_ip = Column(String(45), nullable=True)  # IPv6 compatible

    # Multi-factor authentication
    mfa_enabled = Column(Boolean, nullable=False, default=False)
    mfa_secret = Column(Text, nullable=True)  # TOTP secret
    mfa_backup_codes = Column(JSON, nullable=True)  # List of backup codes
    mfa_recovery_codes = Column(JSON, nullable=True)  # Recovery codes

    # Profile and preferences
    profile_data = Column(JSON, nullable=True)
    preferences = Column(JSON, nullable=True)
    timezone = Column(String(50), nullable=True, default="UTC")
    locale = Column(String(10), nullable=True, default="en")

    # Metadata
    external_id = Column(String(255), nullable=True, unique=True, index=True)
    metadata_ = Column(JSON, nullable=True)

    # Relationships
    sessions = relationship("UserSession", back_populates="user", cascade="all, delete-orphan")
    roles = relationship("UserRole", back_populates="user", cascade="all, delete-orphan")
    external_accounts = relationship("ExternalAccount", back_populates="user", cascade="all, delete-orphan")
    audit_logs = relationship("AuthAuditLog", back_populates="user")

    __table_args__ = (
        Index('ix_{{service_package}}_users_status', 'status'),
        Index('ix_{{service_package}}_users_last_login', 'last_login'),
        Index('ix_{{service_package}}_users_email_verified', 'email_verified'),
        CheckConstraint("status IN ('active', 'inactive', 'suspended', 'pending_verification', 'locked')", name='ck_user_status'),
    )

    @validates('email')
    def validate_email(self, key, email):
        """Validate email format."""
        import re
        if email and not re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', email):
            raise ValueError("Invalid email format")
        return email.lower() if email else email

    @validates('username')
    def validate_username(self, key, username):
        """Validate username format."""
        import re
        if username and not re.match(r'^[a-zA-Z0-9_-]{3,50}$', username):
            raise ValueError("Username must be 3-50 characters and contain only letters, numbers, hyphens, and underscores")
        return username.lower() if username else username

    def is_locked(self) -> bool:
        """Check if the account is currently locked."""
        if self.locked_until is None:
            return False
        return datetime.now(timezone.utc) < self.locked_until

    def can_login(self) -> bool:
        """Check if the user can log in."""
        return (
            self.status == UserStatus.ACTIVE.value and
            self.email_verified and
            not self.is_locked()
        )


class Role(Base, BaseModel):
    """Role model for RBAC."""

    __tablename__ = "{{service_package}}_roles"

    name = Column(String(255), unique=True, nullable=False, index=True)
    display_name = Column(String(255), nullable=True)
    description = Column(Text, nullable=True)
    is_system_role = Column(Boolean, nullable=False, default=False)
    is_active = Column(Boolean, nullable=False, default=True, index=True)

    # Metadata
    metadata_ = Column(JSON, nullable=True)

    # Relationships
    users = relationship("UserRole", back_populates="role")
    permissions = relationship("RolePermission", back_populates="role", cascade="all, delete-orphan")

    __table_args__ = (
        Index('ix_{{service_package}}_roles_active', 'is_active'),
        Index('ix_{{service_package}}_roles_system', 'is_system_role'),
    )


class Permission(Base, BaseModel):
    """Permission model for RBAC."""

    __tablename__ = "{{service_package}}_permissions"

    name = Column(String(255), unique=True, nullable=False, index=True)
    display_name = Column(String(255), nullable=True)
    description = Column(Text, nullable=True)
    scope = Column(String(50), nullable=False, default=PermissionScope.GLOBAL.value, index=True)
    resource_type = Column(String(255), nullable=True, index=True)
    is_active = Column(Boolean, nullable=False, default=True, index=True)

    # Metadata
    metadata_ = Column(JSON, nullable=True)

    # Relationships
    roles = relationship("RolePermission", back_populates="permission")

    __table_args__ = (
        Index('ix_{{service_package}}_permissions_scope', 'scope'),
        Index('ix_{{service_package}}_permissions_resource', 'resource_type'),
        CheckConstraint("scope IN ('global', 'service', 'resource')", name='ck_permission_scope'),
    )


class UserRole(Base, BaseModel):
    """User role assignment model."""

    __tablename__ = "{{service_package}}_user_roles"

    user_id = Column(UUID(as_uuid=True), ForeignKey("{{service_package}}_users.id", ondelete="CASCADE"), nullable=False)
    role_id = Column(UUID(as_uuid=True), ForeignKey("{{service_package}}_roles.id", ondelete="CASCADE"), nullable=False)
    assigned_by = Column(UUID(as_uuid=True), ForeignKey("{{service_package}}_users.id"), nullable=True)
    assigned_at = Column(DateTime(timezone=True), server_default=func.now(), nullable=False)
    expires_at = Column(DateTime(timezone=True), nullable=True)
    is_active = Column(Boolean, nullable=False, default=True, index=True)

    # Context information
    context = Column(JSON, nullable=True)  # Additional context for the role assignment

    # Relationships
    user = relationship("User", back_populates="roles", foreign_keys=[user_id])
    role = relationship("Role", back_populates="users")
    assigner = relationship("User", foreign_keys=[assigned_by])

    __table_args__ = (
        UniqueConstraint('user_id', 'role_id', name='uq_user_role'),
        Index('ix_{{service_package}}_user_roles_user', 'user_id'),
        Index('ix_{{service_package}}_user_roles_role', 'role_id'),
        Index('ix_{{service_package}}_user_roles_active', 'is_active'),
        Index('ix_{{service_package}}_user_roles_expires', 'expires_at'),
    )


class RolePermission(Base, BaseModel):
    """Role permission assignment model."""

    __tablename__ = "{{service_package}}_role_permissions"

    role_id = Column(UUID(as_uuid=True), ForeignKey("{{service_package}}_roles.id", ondelete="CASCADE"), nullable=False)
    permission_id = Column(UUID(as_uuid=True), ForeignKey("{{service_package}}_permissions.id", ondelete="CASCADE"), nullable=False)
    is_active = Column(Boolean, nullable=False, default=True, index=True)

    # Context information
    context = Column(JSON, nullable=True)

    # Relationships
    role = relationship("Role", back_populates="permissions")
    permission = relationship("Permission", back_populates="roles")

    __table_args__ = (
        UniqueConstraint('role_id', 'permission_id', name='uq_role_permission'),
        Index('ix_{{service_package}}_role_permissions_role', 'role_id'),
        Index('ix_{{service_package}}_role_permissions_permission', 'permission_id'),
        Index('ix_{{service_package}}_role_permissions_active', 'is_active'),
    )


class UserSession(Base, BaseModel):
    """User session model."""

    __tablename__ = "{{service_package}}_user_sessions"

    user_id = Column(UUID(as_uuid=True), ForeignKey("{{service_package}}_users.id", ondelete="CASCADE"), nullable=False)
    session_token = Column(String(255), unique=True, nullable=False, index=True)
    refresh_token = Column(String(255), unique=True, nullable=True, index=True)
    status = Column(String(50), nullable=False, default=SessionStatus.ACTIVE.value, index=True)

    # Session information
    ip_address = Column(String(45), nullable=True)
    user_agent = Column(Text, nullable=True)
    device_info = Column(JSON, nullable=True)
    location_info = Column(JSON, nullable=True)

    # Timing
    expires_at = Column(DateTime(timezone=True), nullable=False, index=True)
    last_activity = Column(DateTime(timezone=True), server_default=func.now(), nullable=False, index=True)
    revoked_at = Column(DateTime(timezone=True), nullable=True)
    revoked_by = Column(UUID(as_uuid=True), ForeignKey("{{service_package}}_users.id"), nullable=True)
    revoke_reason = Column(String(255), nullable=True)

    # Metadata
    metadata_ = Column(JSON, nullable=True)

    # Relationships
    user = relationship("User", back_populates="sessions", foreign_keys=[user_id])
    revoker = relationship("User", foreign_keys=[revoked_by])

    __table_args__ = (
        Index('ix_{{service_package}}_sessions_user', 'user_id'),
        Index('ix_{{service_package}}_sessions_status', 'status'),
        Index('ix_{{service_package}}_sessions_expires', 'expires_at'),
        Index('ix_{{service_package}}_sessions_activity', 'last_activity'),
        CheckConstraint("status IN ('active', 'expired', 'revoked')", name='ck_session_status'),
    )

    def is_expired(self) -> bool:
        """Check if the session is expired."""
        return datetime.now(timezone.utc) >= self.expires_at

    def is_active(self) -> bool:
        """Check if the session is active."""
        return self.status == SessionStatus.ACTIVE.value and not self.is_expired()


class ExternalAccount(Base, BaseModel):
    """External account linking model."""

    __tablename__ = "{{service_package}}_external_accounts"

    user_id = Column(UUID(as_uuid=True), ForeignKey("{{service_package}}_users.id", ondelete="CASCADE"), nullable=False)
    provider = Column(String(50), nullable=False, index=True)
    external_id = Column(String(255), nullable=False)
    external_username = Column(String(255), nullable=True)
    external_email = Column(String(255), nullable=True)

    # Provider-specific data
    access_token = Column(Text, nullable=True)
    refresh_token = Column(Text, nullable=True)
    token_expires_at = Column(DateTime(timezone=True), nullable=True)
    profile_data = Column(JSON, nullable=True)

    # Status
    is_active = Column(Boolean, nullable=False, default=True, index=True)
    last_sync = Column(DateTime(timezone=True), nullable=True)

    # Relationships
    user = relationship("User", back_populates="external_accounts")

    __table_args__ = (
        UniqueConstraint('provider', 'external_id', name='uq_external_account'),
        Index('ix_{{service_package}}_external_accounts_user', 'user_id'),
        Index('ix_{{service_package}}_external_accounts_provider', 'provider'),
        Index('ix_{{service_package}}_external_accounts_active', 'is_active'),
        CheckConstraint("provider IN ('google', 'github', 'microsoft', 'ldap')", name='ck_external_provider'),
    )


class AuthAuditLog(Base, BaseModel):
    """Authentication audit log model."""

    __tablename__ = "{{service_package}}_auth_audit_logs"

    user_id = Column(UUID(as_uuid=True), ForeignKey("{{service_package}}_users.id", ondelete="SET NULL"), nullable=True)
    session_id = Column(UUID(as_uuid=True), ForeignKey("{{service_package}}_user_sessions.id", ondelete="SET NULL"), nullable=True)

    # Event information
    event_type = Column(String(100), nullable=False, index=True)
    event_category = Column(String(50), nullable=False, index=True)
    success = Column(Boolean, nullable=False, index=True)

    # Context information
    ip_address = Column(String(45), nullable=True, index=True)
    user_agent = Column(Text, nullable=True)
    username = Column(String(255), nullable=True, index=True)  # For failed login attempts
    email = Column(String(255), nullable=True, index=True)

    # Event details
    details = Column(JSON, nullable=True)
    error_message = Column(Text, nullable=True)

    # Timing
    timestamp = Column(DateTime(timezone=True), server_default=func.now(), nullable=False, index=True)

    # Relationships
    user = relationship("User", back_populates="audit_logs")

    __table_args__ = (
        Index('ix_{{service_package}}_audit_logs_user', 'user_id'),
        Index('ix_{{service_package}}_audit_logs_event_type', 'event_type'),
        Index('ix_{{service_package}}_audit_logs_category', 'event_category'),
        Index('ix_{{service_package}}_audit_logs_success', 'success'),
        Index('ix_{{service_package}}_audit_logs_timestamp', 'timestamp'),
        Index('ix_{{service_package}}_audit_logs_ip', 'ip_address'),
    )


class ServiceCredential(Base, BaseModel):
    """Service-to-service authentication credentials."""

    __tablename__ = "{{service_package}}_service_credentials"

    service_name = Column(String(255), unique=True, nullable=False, index=True)
    service_id = Column(String(255), unique=True, nullable=False, index=True)
    api_key_hash = Column(Text, nullable=False)
    secret_hash = Column(Text, nullable=False)

    # Status and permissions
    is_active = Column(Boolean, nullable=False, default=True, index=True)
    permissions = Column(JSON, nullable=True)  # List of permitted operations
    rate_limit = Column(Integer, nullable=True)  # Requests per minute

    # Metadata
    description = Column(Text, nullable=True)
    contact_email = Column(String(255), nullable=True)
    metadata_ = Column(JSON, nullable=True)

    # Usage tracking
    last_used = Column(DateTime(timezone=True), nullable=True, index=True)
    usage_count = Column(Integer, nullable=False, default=0)

    # Expiration
    expires_at = Column(DateTime(timezone=True), nullable=True, index=True)

    __table_args__ = (
        Index('ix_{{service_package}}_service_credentials_active', 'is_active'),
        Index('ix_{{service_package}}_service_credentials_expires', 'expires_at'),
        Index('ix_{{service_package}}_service_credentials_last_used', 'last_used'),
    )

    def is_expired(self) -> bool:
        """Check if the service credential is expired."""
        if self.expires_at is None:
            return False
        return datetime.now(timezone.utc) >= self.expires_at

    def is_valid(self) -> bool:
        """Check if the service credential is valid."""
        return self.is_active and not self.is_expired()


class TokenBlacklist(Base, BaseModel):
    """Token blacklist for revoked JWT tokens."""

    __tablename__ = "{{service_package}}_token_blacklist"

    jti = Column(String(255), unique=True, nullable=False, index=True)  # JWT ID
    token_hash = Column(Text, nullable=False)  # Hash of the token
    user_id = Column(UUID(as_uuid=True), ForeignKey("{{service_package}}_users.id", ondelete="CASCADE"), nullable=True)

    # Token information
    token_type = Column(String(50), nullable=False, index=True)  # access, refresh, service
    expires_at = Column(DateTime(timezone=True), nullable=False, index=True)
    revoked_at = Column(DateTime(timezone=True), server_default=func.now(), nullable=False)
    revoke_reason = Column(String(255), nullable=True)

    # Context
    revoked_by = Column(UUID(as_uuid=True), ForeignKey("{{service_package}}_users.id"), nullable=True)
    ip_address = Column(String(45), nullable=True)

    __table_args__ = (
        Index('ix_{{service_package}}_token_blacklist_user', 'user_id'),
        Index('ix_{{service_package}}_token_blacklist_type', 'token_type'),
        Index('ix_{{service_package}}_token_blacklist_expires', 'expires_at'),
        Index('ix_{{service_package}}_token_blacklist_revoked', 'revoked_at'),
    )
