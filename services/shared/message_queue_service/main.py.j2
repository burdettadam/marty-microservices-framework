"""
{{service_name}} Message Queue Service - Main Entry Point
"""

import asyncio
import signal
import logging
from typing import Optional

from marty_msf.framework.grpc import UnifiedGrpcServer, ServiceDefinition, create_grpc_server
from marty_common.base_service import BaseService

from src.{{service_package}}.app.core.config import {{service_class}}ServiceConfig
from src.{{service_package}}.app.core.message_broker import get_message_broker
from src.{{service_package}}.app.core.kafka_manager import get_kafka_manager
from src.{{service_package}}.app.core.rabbitmq_manager import get_rabbitmq_manager
from src.{{service_package}}.app.producers import get_event_producer
from src.{{service_package}}.app.consumers import get_event_consumer
from src.{{service_package}}.app.service import {{service_class}}Service

logger = logging.getLogger(__name__)


class MessageQueueServiceManager:
    """Manages the lifecycle of message queue components."""

    def __init__(self, config: {{service_class}}ServiceConfig):
        """Initialize the service manager."""
        self.config = config
        self.message_broker = None
        self.kafka_manager = None
        self.rabbitmq_manager = None
        self.event_producer = None
        self.event_consumer = None
        self.consumer_tasks = []
        self.shutdown_event = asyncio.Event()

    async def initialize(self) -> None:
        """Initialize message queue components."""
        logger.info("Initializing {{service_name}} Message Queue Service...")

        try:
            # Initialize message broker
            self.message_broker = get_message_broker()
            await self.message_broker.initialize()

            # Initialize specific managers based on configuration
            if self.config.kafka_enabled:
                self.kafka_manager = get_kafka_manager()
                await self.kafka_manager.initialize()

            if self.config.rabbitmq_enabled:
                self.rabbitmq_manager = get_rabbitmq_manager()
                await self.rabbitmq_manager.initialize()

            # Initialize producers and consumers
            self.event_producer = get_event_producer()
            await self.event_producer.initialize()

            self.event_consumer = get_event_consumer()
            await self.event_consumer.initialize()

            logger.info("Message queue service components initialized successfully")

        except Exception as e:
            logger.error(f"Failed to initialize message queue service: {e}")
            raise

    async def start_consumers(self) -> None:
        """Start message consumers."""
        if not self.event_consumer:
            logger.warning("Event consumer not initialized")
            return

        logger.info("Starting message consumers...")

        # Start consumers based on configuration
        consumer_configs = self.config.get_consumer_configs()

        for consumer_config in consumer_configs:
            task = asyncio.create_task(
                self.event_consumer.start_consumer(
                    consumer_config["name"],
                    consumer_config["topics"],
                    consumer_config.get("handler"),
                    consumer_config.get("options", {})
                )
            )
            self.consumer_tasks.append(task)
            logger.info(f"Started consumer: {consumer_config['name']}")

    async def stop_consumers(self) -> None:
        """Stop all message consumers."""
        logger.info("Stopping message consumers...")

        # Signal shutdown
        self.shutdown_event.set()

        # Stop consumers gracefully
        if self.event_consumer:
            await self.event_consumer.stop_all_consumers()

        # Cancel consumer tasks
        for task in self.consumer_tasks:
            if not task.done():
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass

        self.consumer_tasks.clear()
        logger.info("All message consumers stopped")

    async def shutdown(self) -> None:
        """Shutdown all message queue components."""
        logger.info("Shutting down message queue service...")

        try:
            # Stop consumers first
            await self.stop_consumers()

            # Shutdown producers
            if self.event_producer:
                await self.event_producer.shutdown()

            # Shutdown managers
            if self.kafka_manager:
                await self.kafka_manager.shutdown()

            if self.rabbitmq_manager:
                await self.rabbitmq_manager.shutdown()

            # Shutdown message broker
            if self.message_broker:
                await self.message_broker.shutdown()

            logger.info("Message queue service shutdown complete")

        except Exception as e:
            logger.error(f"Error during shutdown: {e}")


async def initialize_message_queue_service() -> MessageQueueServiceManager:
    """Initialize the message queue service components."""
    config = {{service_class}}ServiceConfig()
    service_manager = MessageQueueServiceManager(config)

    await service_manager.initialize()
    return service_manager


async def main():
    """Main entry point for the {{service_name}} message queue service."""
    service_manager = None

    try:
        # Load configuration
        config = {{service_class}}ServiceConfig()

        # Initialize service components
        service_manager = await initialize_message_queue_service()

        # Start consumers in background
        await service_manager.start_consumers()

        # Create and configure the gRPC service
        service_instance = {{service_class}}Service()

        # Setup signal handlers for graceful shutdown
        def signal_handler():
            logger.info("Received shutdown signal")
            if service_manager:
                asyncio.create_task(service_manager.shutdown())

        # Register signal handlers
        loop = asyncio.get_event_loop()
        for sig in [signal.SIGTERM, signal.SIGINT]:
            loop.add_signal_handler(sig, signal_handler)

        # Start the gRPC server
        logger.info(f"Starting {{service_name}} Message Queue Service on port {config.port}")

        # Create and start gRPC server
        grpc_server = create_grpc_server(
            port=config_manager.get("grpc_port", 50051),
            enable_health_service=True,
            enable_reflection=True
        )

        # Import and register the message queue service
        from message_queue_service import MessageQueueService

        service_definition = ServiceDefinition(
            service_class=MessageQueueService,
            service_name="{{service_name}}",
            priority=1
        )

        await grpc_server.register_service(service_definition)
        await grpc_server.start()

        try:
            await grpc_server.wait_for_termination()
        finally:
            await grpc_server.stop(grace=30)

    except KeyboardInterrupt:
        logger.info("Service interrupted by user")
    except Exception as e:
        logger.error(f"Service failed with error: {e}")
        raise
    finally:
        if service_manager:
            await service_manager.shutdown()
        logger.info("{{service_name}} Message Queue Service shutdown complete")


if __name__ == "__main__":
    # Configure logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

    # Run the service
    asyncio.run(main())
