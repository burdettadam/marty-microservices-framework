[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "marty-service-discovery"
dynamic = ["version"]
description = "Enterprise-grade service discovery template for Marty Microservices Framework"
readme = "README.md"
license = "MIT"
requires-python = ">=3.10"
authors = [
    { name = "Marty Framework Team", email = "info@martyframework.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Framework :: FastAPI",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: System :: Distributed Computing",
]

dependencies = [
    # Core framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",

    # Service discovery backends
    "python-consul2>=0.1.5",
    "etcd3-py>=0.1.6",
    "kubernetes>=28.1.0",

    # HTTP client and networking
    "httpx>=0.25.0",
    "aiohttp>=3.9.0",
    "aiofiles>=23.2.0",

    # Database and caching
    "redis>=5.0.0",
    "asyncpg>=0.29.0",
    "sqlalchemy[asyncio]>=2.0.0",
    "alembic>=1.13.0",

    # Monitoring and observability
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-exporter-jaeger>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "opentelemetry-instrumentation-httpx>=0.42b0",

    # Security and authentication
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",

    # Serialization and validation
    "orjson>=3.9.0",
    "msgpack>=1.0.7",

    # Utilities
    "tenacity>=8.2.0",
    "click>=8.1.0",
    "rich>=13.7.0",
    "structlog>=23.2.0",
    "python-dotenv>=1.0.0",

    # Async support
    "asyncio-mqtt>=0.16.0",
    "aiokafka>=0.10.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-benchmark>=4.0.0",
    "httpx>=0.25.0",
    "respx>=0.20.0",

    # Code quality
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pylint>=3.0.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",

    # Documentation
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.25.0",
    "myst-parser>=2.0.0",

    # Development tools
    "pre-commit>=3.6.0",
    "commitizen>=3.13.0",
    "watchdog>=3.0.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",
    "respx>=0.20.0",
    "testcontainers>=3.7.0",
]

monitoring = [
    "grafana-api>=1.0.3",
    "elasticsearch>=8.11.0",
    "kibana-api>=0.1.3",
]

all = [
    "marty-service-discovery[dev,test,monitoring]"
]

[project.urls]
Documentation = "https://martyframework.github.io/service-discovery"
Repository = "https://github.com/martyframework/service-discovery"
Issues = "https://github.com/martyframework/service-discovery/issues"
Changelog = "https://github.com/martyframework/service-discovery/blob/main/CHANGELOG.md"

[project.scripts]
service-discovery = "main:cli"
discovery-admin = "main:admin_cli"

[tool.hatch.version]
path = "main.py"

[tool.hatch.build.targets.sdist]
include = [
    "/main.py",
    "/config.py",
    "/README.md",
    "/k8s/",
    "/tests/",
]

[tool.hatch.build.targets.wheel]
packages = ["."]

# Development environment
[tool.hatch.envs.default]
dependencies = [
    "marty-service-discovery[dev]"
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=. --cov-report=html --cov-report=term {args:tests}"
lint = "flake8 . && mypy . && black --check . && isort --check-only ."
format = "black . && isort ."
security = "bandit -r . && safety check"
serve = "uvicorn main:app --reload --host 0.0.0.0 --port 8090"
serve-prod = "uvicorn main:app --host 0.0.0.0 --port 8090 --workers 4"

# Testing environment
[tool.hatch.envs.test]
dependencies = [
    "marty-service-discovery[test]"
]

[[tool.hatch.envs.test.matrix]]
python = ["3.10", "3.11", "3.12", "3.13"]

[tool.hatch.envs.test.scripts]
run = "pytest {args:tests}"
run-cov = "pytest --cov=. --cov-report=xml --cov-report=term {args:tests}"
integration = "pytest tests/integration {args}"
unit = "pytest tests/unit {args}"
benchmark = "pytest tests/benchmark --benchmark-only {args}"

# Linting environment
[tool.hatch.envs.lint]
dependencies = [
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pylint>=3.0.0",
    "bandit>=1.7.0",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:.}"
style = "flake8 {args:.} && black --check --diff {args:.} && isort --check-only --diff {args:.}"
fmt = "black {args:.} && isort {args:.}"
security = "bandit -r {args:.}"
all = "style && typing && security"

# Documentation environment
[tool.hatch.envs.docs]
dependencies = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.25.0",
    "myst-parser>=2.0.0",
]

[tool.hatch.envs.docs.scripts]
build = "sphinx-build -W -b html docs docs/_build/html"
serve = "sphinx-autobuild docs docs/_build/html --host 0.0.0.0 --port 8080"

# Black formatting configuration
[tool.black]
target-version = ["py310"]
line-length = 100
skip-string-normalization = true
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = [".", "tests"]

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "-ra",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "benchmark: Performance benchmark tests",
    "slow: Slow running tests",
    "consul: Tests requiring Consul",
    "etcd: Tests requiring etcd",
    "k8s: Tests requiring Kubernetes",
]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "*/tests/*",
    "test_*.py",
    "*_test.py",
    "*/test_*.py",
    "*/*_test.py",
    "*/site-packages/*",
    ".venv/*",
    "*/venv/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

# MyPy configuration
[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
ignore_missing_imports = false

[[tool.mypy.overrides]]
module = [
    "consul.*",
    "etcd3.*",
    "kubernetes.*",
    "prometheus_client.*",
    "opentelemetry.*",
    "testcontainers.*",
]
ignore_missing_imports = true

# Pylint configuration
[tool.pylint.main]
load-plugins = [
    "pylint.extensions.docparams",
    "pylint.extensions.docstyle",
    "pylint.extensions.mccabe",
]

[tool.pylint.messages_control]
disable = [
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-instance-attributes",
    "too-many-locals",
    "duplicate-code",
    "fixme",
    "import-error",
]

[tool.pylint.format]
max-line-length = 100

[tool.pylint.design]
max-complexity = 10
max-args = 8
max-locals = 15
max-returns = 6
max-branches = 12
max-statements = 50

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "test_*.py", "*_test.py"]
skips = ["B101", "B601"]

# Safety dependency checking
[tool.safety]
ignore = []

# Pre-commit hooks configuration
[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "main.py:__version__",
]

[tool.vulture]
min_confidence = 60
paths = ["."]
exclude = ["tests/"]
