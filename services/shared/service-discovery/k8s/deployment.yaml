apiVersion: apps/v1
kind: Deployment
metadata:
  name: service-discovery
  namespace: marty-framework
  labels:
    app: service-discovery
    component: infrastructure
    version: v1
    part-of: marty-framework
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: service-discovery
  template:
    metadata:
      labels:
        app: service-discovery
        component: infrastructure
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: service-discovery
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: service-discovery
        image: marty-framework/service-discovery:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8090
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: SERVICE_HOST
          value: "0.0.0.0"
        - name: SERVICE_PORT
          value: "8090"
        - name: ENVIRONMENT
          value: "kubernetes"
        - name: REGISTRY_TYPE
          value: "kubernetes"
        - name: K8S_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: K8S_SERVICE_ACCOUNT
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: service-discovery-config
              key: log_level
        - name: METRICS_ENABLED
          valueFrom:
            configMapKeyRef:
              name: service-discovery-config
              key: metrics_enabled
        - name: HEALTH_CHECK_INTERVAL
          valueFrom:
            configMapKeyRef:
              name: service-discovery-config
              key: health_check_interval
        - name: CONSUL_HOST
          valueFrom:
            configMapKeyRef:
              name: service-discovery-config
              key: consul_host
              optional: true
        - name: CONSUL_PORT
          valueFrom:
            configMapKeyRef:
              name: service-discovery-config
              key: consul_port
              optional: true
        - name: CONSUL_TOKEN
          valueFrom:
            secretKeyRef:
              name: service-discovery-secrets
              key: consul_token
              optional: true
        - name: ETCD_HOST
          valueFrom:
            configMapKeyRef:
              name: service-discovery-config
              key: etcd_host
              optional: true
        - name: ETCD_PORT
          valueFrom:
            configMapKeyRef:
              name: service-discovery-config
              key: etcd_port
              optional: true
        - name: ETCD_USER
          valueFrom:
            secretKeyRef:
              name: service-discovery-secrets
              key: etcd_user
              optional: true
        - name: ETCD_PASSWORD
          valueFrom:
            secretKeyRef:
              name: service-discovery-secrets
              key: etcd_password
              optional: true
        - name: TLS_ENABLED
          valueFrom:
            configMapKeyRef:
              name: service-discovery-config
              key: tls_enabled
        - name: API_KEY_ENABLED
          valueFrom:
            configMapKeyRef:
              name: service-discovery-config
              key: api_key_enabled
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: service-discovery-secrets
              key: jwt_secret
              optional: true
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: tls-certs
          mountPath: /app/certs
          readOnly: true
        - name: data-volume
          mountPath: /app/data
        - name: logs-volume
          mountPath: /app/logs
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health/startup
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 30
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config-volume
        configMap:
          name: service-discovery-config
      - name: tls-certs
        secret:
          secretName: service-discovery-tls
          optional: true
      - name: data-volume
        emptyDir: {}
      - name: logs-volume
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
        operator: Exists
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane
        operator: Exists
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: service-discovery
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 10
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values:
                - infrastructure
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      restartPolicy: Always
