"""
{{service_description}}

This is a FastAPI service generated with enterprise infrastructure:
- OpenTelemetry distributed tracing
- Comprehensive health monitoring and metrics
- Repository pattern for data access
- Event-driven architecture
- Structured configuration management
"""

import uvicorn
from contextlib import asynccontextmanager
from fastapi import FastAPI

from marty_msf.framework.config import UnifiedConfigurationManager
from marty_msf.framework.secrets import UnifiedSecrets
from marty_msf.observability.standard import create_standard_observability, set_global_observability
from marty_msf.observability.standard_correlation import StandardCorrelationMiddleware
from src.framework.observability.monitoring import ServiceMonitor
{% if use_database %}
from marty_msf.framework.database import DatabaseManager
from src.framework.events import TransactionalOutboxEventBus
{% endif %}

from .api.routes import router
from .core.middleware import setup_middleware
from .core.error_handlers import setup_error_handlers


# Global references
config_manager: UnifiedConfigurationManager = None
secrets_manager: UnifiedSecrets = None
observability = None
monitor: ServiceMonitor = None
{% if use_database %}
db_manager: DatabaseManager = None
event_bus: TransactionalOutboxEventBus = None
{% endif %}


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Manage application lifespan with unified configuration and secrets."""
    global config_manager, secrets_manager, observability, monitor{% if use_database %}, db_manager, event_bus{% endif %}

    # Initialize unified configuration
    config_manager = UnifiedConfigurationManager()
    await config_manager.initialize()

    # Initialize unified secrets
    secrets_manager = UnifiedSecrets()
    await secrets_manager.initialize()

    service_name = config_manager.get("service.name", "{{service_name}}")

    # Startup
    print(f"Starting {service_name} with unified enterprise infrastructure...")

    # Initialize unified observability
    observability = create_standard_observability(
        service_name=service_name,
        service_version=config_manager.get("service.version", "1.0.0"),
        service_type="fastapi"
    )
    await observability.initialize()
    set_global_observability(observability)

    {% if use_database %}
    # Initialize database with unified config
    database_url = await secrets_manager.get_secret("database_url",
                    config_manager.get("database.url", "postgresql+asyncpg://user:password@localhost/{{service_name}}_db"))
    db_manager = DatabaseManager(database_url)
    await db_manager.create_tables()

    # Initialize event bus
    session_factory = db_manager.get_async_session_factory()
    event_bus = TransactionalOutboxEventBus(session_factory)
    await event_bus.start()

    # Store in app state for access in routes
    app.state.db_manager = db_manager
    app.state.event_bus = event_bus
    {% endif %}

    # Start monitoring
    monitor = ServiceMonitor(service_name)
    monitor.start_monitoring()
    app.state.monitor = monitor
    app.state.config_manager = config_manager
    app.state.secrets_manager = secrets_manager

    print(f"{service_name} started successfully")

    yield

    # Shutdown
    print(f"Shutting down {service_name}...")

    if monitor:
        monitor.stop_monitoring()

    {% if use_database %}
    if event_bus:
        await event_bus.stop()

    if db_manager:
        await db_manager.close()
    {% endif %}

    if observability:
        await observability.shutdown()

    if secrets_manager:
        await secrets_manager.cleanup()

    if config_manager:
        await config_manager.cleanup()

    print(f"{service_name} shutdown complete")


def create_app() -> FastAPI:
    """
    Create FastAPI application with unified enterprise infrastructure.

    This sets up:
    - Unified configuration and secrets management
    - Standard observability with OpenTelemetry
    - Health monitoring and metrics
    - Database access with repository pattern
    - Event-driven architecture
    - Comprehensive error handling
    """

    # Initialize FastAPI with unified configuration
    app = FastAPI(
        title="{{service_name}}".replace("_", " ").title(),
        description="{{service_description}}",
        version="1.0.0",
        lifespan=lifespan,
    )

    # Add unified observability middleware
    app.add_middleware(StandardCorrelationMiddleware)

    # Setup enterprise patterns
    setup_middleware(app)
    setup_error_handlers(app)

    # Include API routes
    app.include_router(router, prefix="/api/v1")

    return app


async def main() -> None:
    """Run the FastAPI application with unified configuration."""
    # Initialize config temporarily to get server settings
    temp_config = UnifiedConfigurationManager()
    await temp_config.initialize()

    app = create_app()

    # Run with uvicorn using unified configuration
    uvicorn_config = uvicorn.Config(
        app,
        host=temp_config.get("server.host", "0.0.0.0"),
        port=temp_config.get("server.port", {{http_port}}),
        log_level=temp_config.get("logging.level", "info").lower(),
        reload=temp_config.get("server.debug", False),
    )

    await temp_config.cleanup()

    server = uvicorn.Server(uvicorn_config)
    await server.serve()


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
