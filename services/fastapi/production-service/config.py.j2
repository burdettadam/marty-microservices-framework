"""
Configuration management for {{service_class}} Service

This module provides structured configuration management following the Marty framework patterns.
Configuration is loaded from environment variables and YAML files with environment-specific overrides.
"""
import os
from functools import lru_cache
from typing import Any, Dict, Optional

from pydantic import Field
from pydantic_settings import BaseSettings

class {{service_class}}Config(BaseSettings):
    """
    Configuration class for {{service_class}} Service.

    Uses Pydantic BaseSettings for automatic environment variable loading
    and validation. Configuration follows the Marty framework patterns.
    """

    # Service identification
    service_name: str = Field(default="{{service_name}}", description="Service name")
    service_version: str = Field(default="1.0.0", description="Service version")
    environment: str = Field(default="development", description="Environment (development, staging, production)")

    # Server configuration
    host: str = Field(default="0.0.0.0", description="Server host")
    port: int = Field(default={{http_port}}, description="Server port")
    debug: bool = Field(default=False, description="Debug mode")

    # Logging configuration
    log_level: str = Field(default="INFO", description="Logging level")
    log_format: str = Field(default="json", description="Log format (json, text)")
    enable_audit_logging: bool = Field(default=True, description="Enable audit logging")

    # Database configuration (if needed)
    database_url: Optional[str] = Field(default=None, description="Database connection URL")
    database_pool_size: int = Field(default=10, description="Database connection pool size")
    database_timeout: int = Field(default=30, description="Database connection timeout")

    # Cache configuration (if needed)
    redis_url: Optional[str] = Field(default=None, description="Redis connection URL")
    cache_ttl: int = Field(default=3600, description="Default cache TTL in seconds")

    # External service configuration
    external_api_base_url: Optional[str] = Field(default=None, description="External API base URL")
    external_api_timeout: int = Field(default=30, description="External API timeout in seconds")
    external_api_retries: int = Field(default=3, description="External API retry attempts")

    # Security configuration
    secret_key: str = Field(default="dev-secret-key-change-in-production", description="Secret key for signing")
    access_token_expire_minutes: int = Field(default=30, description="Access token expiration time")

    # Monitoring and observability
    enable_metrics: bool = Field(default=True, description="Enable Prometheus metrics")
    metrics_port: int = Field(default={{http_port}}, description="Metrics endpoint port")
    enable_tracing: bool = Field(default=False, description="Enable distributed tracing")
    jaeger_endpoint: Optional[str] = Field(default=None, description="Jaeger tracing endpoint")

    # Rate limiting
    rate_limit_enabled: bool = Field(default=True, description="Enable rate limiting")
    rate_limit_requests: int = Field(default=100, description="Requests per minute per client")

    # CORS configuration
    cors_origins: list = Field(default=["*"], description="CORS allowed origins")
    cors_methods: list = Field(default=["*"], description="CORS allowed methods")
    cors_headers: list = Field(default=["*"], description="CORS allowed headers")

    # Business logic specific configuration
    # Add your service-specific configuration here
    max_concurrent_operations: int = Field(default=10, description="Maximum concurrent business operations")
    operation_timeout: int = Field(default=300, description="Business operation timeout in seconds")
    enable_async_processing: bool = Field(default=True, description="Enable asynchronous processing")

    class Config:
        env_file = ".env"
        env_file_encoding = "utf-8"
        case_sensitive = False

        # Environment variable prefixes
        env_prefix = "{{service_package.upper()}}_"

        @classmethod
        def customise_sources(
            cls,
            init_settings,
            env_settings,
            file_secret_settings
        ):
            """
            Customize configuration sources priority.
            Priority (highest to lowest):
            1. Environment variables
            2. .env file
            3. Init settings (defaults)
            """
            return (
                env_settings,
                init_settings,
                file_secret_settings,
            )

    def get_database_config(self) -> Dict[str, Any]:
        """Get database configuration dictionary"""
        return {
            "url": self.database_url,
            "pool_size": self.database_pool_size,
            "timeout": self.database_timeout
        }

    def get_cache_config(self) -> Dict[str, Any]:
        """Get cache configuration dictionary"""
        return {
            "url": self.redis_url,
            "ttl": self.cache_ttl
        }

    def get_external_api_config(self) -> Dict[str, Any]:
        """Get external API configuration dictionary"""
        return {
            "base_url": self.external_api_base_url,
            "timeout": self.external_api_timeout,
            "retries": self.external_api_retries
        }

    def is_production(self) -> bool:
        """Check if running in production environment"""
        return self.environment.lower() == "production"

    def is_development(self) -> bool:
        """Check if running in development environment"""
        return self.environment.lower() == "development"

    def get_cors_config(self) -> Dict[str, Any]:
        """Get CORS configuration dictionary"""
        return {
            "allow_origins": self.cors_origins,
            "allow_methods": self.cors_methods,
            "allow_headers": self.cors_headers,
            "allow_credentials": True
        }

@lru_cache()
def get_settings() -> {{service_class}}Config:
    """
    Get cached configuration instance.

    Uses lru_cache to ensure configuration is loaded only once
    and reused throughout the application lifecycle.

    Returns:
        Configuration instance
    """
    return {{service_class}}Config()

def get_config_summary() -> Dict[str, Any]:
    """
    Get configuration summary for debugging and monitoring.

    Returns:
        Dictionary with non-sensitive configuration values
    """
    settings = get_settings()

    return {
        "service_name": settings.service_name,
        "service_version": settings.service_version,
        "environment": settings.environment,
        "host": settings.host,
        "port": settings.port,
        "debug": settings.debug,
        "log_level": settings.log_level,
        "enable_metrics": settings.enable_metrics,
        "enable_tracing": settings.enable_tracing,
        "rate_limit_enabled": settings.rate_limit_enabled,
        "max_concurrent_operations": settings.max_concurrent_operations,
        "enable_async_processing": settings.enable_async_processing,
        # Don't include sensitive values like secret_key, database_url, etc.
    }
