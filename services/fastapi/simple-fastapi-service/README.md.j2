# {{service_name.replace('-', ' ').title()}}

{{service_description | default("FastAPI microservice built with MMF patterns")}}

## Features

- ✅ **Framework Integration**: Works with or without full MMF framework
- ✅ **Health Checks**: Standard `/health` endpoint with detailed status
- ✅ **Metrics**: Prometheus metrics at `/metrics`
- ✅ **Observability**: Request tracking and correlation IDs
- ✅ **Production Ready**: Proper error handling and logging

## Quick Start

```bash
# Install dependencies
pip install -r requirements.txt

# Run the service
python main.py

# Or with uvicorn
uvicorn main:app --host 0.0.0.0 --port {{service_port | default(8000)}}
```

## API Endpoints

- `GET /` - Service information
- `GET /health` - Health check
- `GET /metrics` - Prometheus metrics
- `GET /info` - Detailed service information
- `GET /status` - Service status
- `POST /process` - Main business logic endpoint

## Configuration

The service uses environment-based configuration. Key settings:

- `HOST`: Service host (default: 0.0.0.0)
- `PORT`: Service port (default: {{service_port | default(8000)}})
- `DEBUG`: Debug mode (default: false)

## Framework Integration

This service is designed to work both:

1. **Standalone**: Run directly with just FastAPI dependencies
2. **With MMF Framework**: Automatically detects and uses framework features when available

## Development

```bash
# Run tests
pytest

# Run with hot reload
uvicorn main:app --reload

# Check health
curl http://localhost:{{service_port | default(8000)}}/health
```

## Production Deployment

```bash
# Using Gunicorn
gunicorn -w 4 -k uvicorn.workers.UvicornWorker main:app

# Using Docker (if Dockerfile provided)
docker build -t {{service_name}} .
docker run -p {{service_port | default(8000)}}:{{service_port | default(8000)}} {{service_name}}
```

## Metrics

The service exposes Prometheus metrics:

- `{{service_name.replace("-", "_")}}_requests_total` - Total requests by method/endpoint/status
- `{{service_name.replace("-", "_")}}_request_duration_seconds` - Request processing time
- `{{service_name.replace("-", "_")}}_active_connections_total` - Active connections

## Integration with Other Services

Example of calling this service from another service:

```python
import aiohttp

async def call_{{service_name.replace('-', '_')}}(data: str, correlation_id: str = None):
    headers = {}
    if correlation_id:
        headers["x-correlation-id"] = correlation_id

    async with aiohttp.ClientSession() as session:
        async with session.post(
            "http://{{service_name}}:{{service_port | default(8000)}}/process",
            json={"data": data},
            headers=headers
        ) as response:
            return await response.json()
```

Generated by MMF Service Generator v{{generator_version | default("1.0.0")}}
