apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: marty-framework
  labels:
    app: api-gateway
    component: gateway
    version: v1
    part-of: marty-framework
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
        component: gateway
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: api-gateway
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: api-gateway
        image: marty-framework/api-gateway:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: CONSUL_HOST
          value: "consul.marty-framework.svc.cluster.local"
        - name: CONSUL_PORT
          value: "8500"
        - name: REDIS_HOST
          value: "redis.marty-framework.svc.cluster.local"
        - name: REDIS_PORT
          value: "6379"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: api-gateway-secrets
              key: jwt-secret
        - name: JAEGER_ENDPOINT
          value: "http://jaeger-collector.monitoring.svc.cluster.local:14268/api/traces"
        - name: LOG_LEVEL
          value: "INFO"
        - name: METRICS_PORT
          value: "9090"
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: config
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: tmp
        emptyDir: {}
      - name: config
        configMap:
          name: api-gateway-config
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - api-gateway
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300

---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: marty-framework
  labels:
    app: api-gateway
    component: gateway
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  - port: 9090
    targetPort: metrics
    protocol: TCP
    name: metrics
  selector:
    app: api-gateway

---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-external
  namespace: marty-framework
  labels:
    app: api-gateway
    component: gateway
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: api-gateway

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api-gateway
  namespace: marty-framework
  labels:
    app: api-gateway
    component: gateway
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - api.marty-framework.com
    secretName: api-gateway-tls
  rules:
  - host: api.marty-framework.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: api-gateway
            port:
              number: 80

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: api-gateway
  namespace: marty-framework
  labels:
    app: api-gateway
    component: gateway

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: api-gateway
  labels:
    app: api-gateway
    component: gateway
rules:
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: api-gateway
  labels:
    app: api-gateway
    component: gateway
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: api-gateway
subjects:
- kind: ServiceAccount
  name: api-gateway
  namespace: marty-framework

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-gateway-config
  namespace: marty-framework
  labels:
    app: api-gateway
    component: gateway
data:
  config.yaml: |
    environment: production
    gateway:
      host: "0.0.0.0"
      port: 8080
      workers: 1
      max_concurrent_requests: 5000
      default_timeout: 30
      enable_cors: true
      cors_origins:
        - "https://app.marty-framework.com"
        - "https://admin.marty-framework.com"

    service_discovery:
      type: "kubernetes"
      namespace: "marty-framework"
      health_check_interval: 15
      service_ttl: 60

    authentication:
      jwt_algorithm: "HS256"
      jwt_expiration: 3600
      api_key_header: "X-API-Key"

    caching:
      enabled: true
      default_ttl: 300
      max_size: 10000

    monitoring:
      enable_metrics: true
      metrics_port: 9090
      enable_tracing: true
      log_level: "INFO"
      log_format: "json"

    default_rate_limit:
      requests_per_second: 100.0
      burst_size: 200
      window_size: 60

    default_circuit_breaker:
      failure_threshold: 5
      timeout_seconds: 30
      half_open_max_calls: 3

---
apiVersion: v1
kind: Secret
metadata:
  name: api-gateway-secrets
  namespace: marty-framework
  labels:
    app: api-gateway
    component: gateway
type: Opaque
data:
  # Generate with: echo -n "your-super-secret-jwt-key" | base64
  jwt-secret: eW91ci1zdXBlci1zZWNyZXQtand0LWtleQ==

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: api-gateway
  namespace: marty-framework
  labels:
    app: api-gateway
    component: gateway
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: api-gateway

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-gateway
  namespace: marty-framework
  labels:
    app: api-gateway
    component: gateway
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-gateway
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
